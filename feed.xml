<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crystal Sight</title>
    <description>See further, but how far is far?
</description>
    <link>http://carltonf.github.io/</link>
    <atom:link href="http://carltonf.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 07 Aug 2016 09:46:04 +0000</pubDate>
    <lastBuildDate>Sun, 07 Aug 2016 09:46:04 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Revisiting TODO of this site</title>
        <description>&lt;p&gt;With a revamping done, it’s a good moment to reflect upon the old plan I had for
this site and some ideas about it in the future.&lt;/p&gt;

&lt;p&gt;It’s been quite a while since the last time I’ve published a post &lt;span id=&quot;sn-drafts&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;for the record, I &lt;em&gt;did&lt;/em&gt; write several drafts during this vacancy&lt;/span&gt;
and now this site is undergoing a second redesign. &lt;span id=&quot;sn-history&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The 1st attempt is using &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;, the 2nd attempt is using &lt;a href=&quot;https://github.com/ardumont/org2jekyll&quot;&gt;Org2Jekyll&lt;/a&gt; and Jekyll itself. There is also a 2.5 attempt when I switch from org source to markdown, but old posts are not all converted though.&lt;/span&gt;.&lt;/p&gt;

&lt;h1 id=&quot;review&quot;&gt;Review&lt;/h1&gt;

&lt;p&gt;The old &lt;em&gt;TODO&lt;/em&gt; page was published almost exactly one year ago. &lt;span id=&quot;last-TODO&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The last &lt;a href=&quot;http://carltonf.github.io/post/old-todo-page&quot;&gt;todo note&lt;/a&gt; is taken at 03 August 2015.&lt;/span&gt; The timing is a pleasant coincidence.&lt;/p&gt;

&lt;h2 id=&quot;populate-wiki&quot;&gt;Populate Wiki&lt;/h2&gt;

&lt;p&gt;I would call this part partially done as dozens of entries have been added since
then. However there are not as many as I’d like. However, at present I believe
a completely independent wiki is not necessary. Much like the value of
sidenote/marginnote, wiki should serve posts as reference source, and thus many
features planned for wikis are scratched.&lt;/p&gt;

&lt;h2 id=&quot;sidebar&quot;&gt;Sidebar&lt;/h2&gt;

&lt;p&gt;Sidebar is removed all together. &lt;span id=&quot;sn-sidebar&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;To my slight surprise, half of the original &lt;em&gt;TODO&lt;/em&gt; is about features for sidebar. I guess it’s because I was learning web design back then and sidebar offered the most challenging problems. Unfortunately, these &lt;em&gt;challenges&lt;/em&gt; served only as distractions to making a good personal site: writing high-quality posts and showcase real work.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Firstly, the design style of this site is &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS&lt;/a&gt;. 
&lt;span id=&quot;sn-kiss&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;In retrospect, all previous revamping are actually moving towards the current &lt;code class=&quot;highlighter-rouge&quot;&gt;KISS&lt;/code&gt; style. &lt;code class=&quot;highlighter-rouge&quot;&gt;Octopress&lt;/code&gt; is full of conventions I didn’t understand. Writing posts in Emacs &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt; and then do the conversion adds extra indirections and complexities.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Further, I’ve realized that &lt;strong&gt;the most common&lt;/strong&gt; way visitors (including myself)
use this site is: search the web or follow some links to a post in this site,
read the interesting bits and then leave. In the very few occasions a visitor
might be curious enough to explore other parts of the site. So the pivotal point
in design should be to maximize the readability of &lt;strong&gt;the post&lt;/strong&gt; and sidebar is
only a distraction. &lt;span id=&quot;sn-sidebar&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Actually in the old design, sidebar is an example of &lt;em&gt;premature optimization&lt;/em&gt;. Sidebar essentially is an optimization for site navigation, which as any other shortcut/optimization should be justified first. It can be easily justified for some e-commerce site, but not really for a small personal site.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-philosophy-collection&quot;&gt;The Philosophy Collection&lt;/h2&gt;

&lt;p&gt;Not much have been done. However, I started to write some posts on more
abstract topics like &lt;a href=&quot;http://carltonf.github.io/post/a-workflow-for-bug-fixing&quot;&gt;bug fixing
methodology&lt;/a&gt;, &lt;a href=&quot;http://carltonf.github.io/post/adapt-vs-configure&quot;&gt;the
merits of adaption&lt;/a&gt; and etc.
I think this is a good direction and in line with my aforementioned plan for
wikis. I see posts more as observational diary about ideas. It’s about the
process that an idea comes into being, goes through stages of developing,
absorbing new facts, integrating with other ideas to form a system and
eventually fading into irrelevance and being superseded by new ideas. 
&lt;span class=&quot;marginnote&quot;&gt;And it’s in this view of posts, specific, reusable
tips/scripts should be factored out into wiki. Wiki serves posts (in extension
&lt;em&gt;ideas&lt;/em&gt;) as references.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With the above said, I’ll strive to stay pragmatic though ;P.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s about the review. It’s a little disappointed to see only so few has been
planned.&lt;/p&gt;

&lt;h1 id=&quot;the-new-plan&quot;&gt;The &lt;em&gt;NEW&lt;/em&gt; Plan&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;“Nothing is ever new. Only the history previously unknown.”&lt;/em&gt; &lt;span id=&quot;sn-nothing-new&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;I failed to find this saying’s origin, the closest source seems to be &lt;em&gt;“There is nothing new under the sun. It has all been done before”&lt;/em&gt; from &lt;a href=&quot;https://en.wikipedia.org/wiki/A_Study_in_Scarlet&quot;&gt;A Study in Scarlet&lt;/a&gt;&lt;/span&gt;. So the &lt;em&gt;NEW&lt;/em&gt;
plan is more about the ideas I’ve long had and would like to see implemented in
the site. The &lt;em&gt;TODO&lt;/em&gt; page is no longer there, but I’ve enjoyed the one-year
review of my previous &lt;em&gt;TODO&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;styledesign&quot;&gt;Style&amp;amp;Design&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;In my metaphor, &lt;code class=&quot;highlighter-rouge&quot;&gt;KISS&lt;/code&gt; is like straight parallel
lines and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tufte CSS&lt;/code&gt; adds musical notes on them.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I’ve liked the &lt;a href=&quot;https://edwardtufte.github.io/tufte-css/&quot;&gt;Tufte CSS Style&lt;/a&gt; from
the very beginning, before I even knew its name. It’s &lt;code class=&quot;highlighter-rouge&quot;&gt;KISS&lt;/code&gt; plus delicacy. I’ve
adapted this style with &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; using good work done by
&lt;a href=&quot;https://cdn.ampproject.org/c/siawyoung.com/immaculate/&quot;&gt;Immaculate Jekyll Theme&lt;/a&gt;,
which also features the
&lt;a href=&quot;https://www.ampproject.org/docs/get_started/about-amp.html&quot;&gt;AMP&lt;/a&gt;. &lt;span id=&quot;sn-amp&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Personally, I know little about &lt;code class=&quot;highlighter-rouge&quot;&gt;AMP&lt;/code&gt;, other than it’s proponed by &lt;em&gt;Google&lt;/em&gt; and good for mobile devices. It seems to embed all stylesheet within the HTML itself, which is bewildering to me for now.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I’ve also put up a homepage instead of the list of posts as I envision this site
to be the main hub for all my online activities.&lt;/p&gt;

&lt;h2 id=&quot;habit&quot;&gt;Habit&lt;/h2&gt;

&lt;p&gt;One main goal of the plan is to cultivate a habit of frequent writing. How
exactly I am going to achieve this still eludes me. Here is the sketch of what
I want to accomplish:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write everyday.&lt;/p&gt;

    &lt;p&gt;I’ve started using &lt;code class=&quot;highlighter-rouge&quot;&gt;OneNote&lt;/code&gt; for planning and note taking. The accumulated
notes can serve as a good basis. &lt;span class=&quot;marginnote&quot;&gt;Many more old
notes are in &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt; files.&lt;/span&gt; As posting everyday would be quite
laborious, there have to be some guidelines on what to write, how to write. A
transitory guide is to &lt;em&gt;single out an idea, quickly scratch a post and
publish, then review and refine&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Formalize a writing style.&lt;/p&gt;

    &lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;em&gt;TODO&lt;/em&gt; Reflect on the way posts are
written and put up a post about a good style&lt;/span&gt;&lt;/p&gt;

    &lt;p&gt;Everyone has a style but not everyone is aware, let alone formalizing it. A
consistent and formal style can really speed up writing and it’s the key in
forming the habit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;extra-collections&quot;&gt;Extra Collections&lt;/h2&gt;

&lt;p&gt;Other than the habit, I’d like to see some new additions to my site.&lt;/p&gt;

&lt;h3 id=&quot;presentations&quot;&gt;Presentations&lt;/h3&gt;

&lt;p&gt;If posts are for a single visitor&lt;span id=&quot;sn-posts-for&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;To digest the content in one’s own pace.&lt;/span&gt;, presentations are for a group of audience. The format
and use cases of presentations enforces the following properties: &lt;em&gt;compact&lt;/em&gt;,
&lt;em&gt;succinct&lt;/em&gt;, &lt;em&gt;open for questions and critics&lt;/em&gt;. It can serve as the best way to
introduce/summarize a complex topic.&lt;/p&gt;

&lt;p&gt;As it said, &lt;em&gt;“Every job is a sales job.”&lt;/em&gt;. Being good at presentation also
makes one more competitive in job market.&lt;/p&gt;

&lt;p&gt;The plan is to recap, recollect all my old presentations first. Reedit them if
the topics are still relevant today. Write new presentations whenever it’s good
to do so.&lt;/p&gt;

&lt;h3 id=&quot;showcases&quot;&gt;Showcases&lt;/h3&gt;

&lt;p&gt;Hmm, this part is the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; clause in my plan&lt;span id=&quot;sn-default-clause&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;I.e. everything else. ;P&lt;/span&gt;. More concretely, as there are some other sites
I’ve frequently used out there, collect those worthy ones and make a page for
them in this site. &lt;span id=&quot;sn-main-hub-reiterate&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;&lt;strong&gt;This&lt;/strong&gt; site is my online hut(hub).&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;about-reading-notes&quot;&gt;About Reading Notes&lt;/h3&gt;

&lt;p&gt;Reading notes will be removed and only more thoughtful review for books are
worth a post.&lt;/p&gt;

&lt;p&gt;I’ve got some posts &lt;span id=&quot;sn-reading-draft&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Some more are in &lt;code class=&quot;highlighter-rouge&quot;&gt;_drafts/&lt;/code&gt;&lt;/span&gt;
that are merely quotes from books I’ve read. Posts are ill-fit for quote
collection like that. For the purpose of reviewing, I’ve found
&lt;a href=&quot;http://ankisrs.net/&quot;&gt;Anki&lt;/a&gt; to be handy.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The End&lt;/h2&gt;

&lt;p&gt;That’s all for now. Big ideas and let’s make sure they would end up as &lt;em&gt;Big
words&lt;/em&gt; only. &lt;span id=&quot;sn-big-words&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;http://www.thefrisky.com/2012-05-16/12-words-and-phrases-from-game-of-thrones-that-need-to-be-part-of-your-vocabulary/&quot;&gt;&lt;em&gt;“Words are wind~”&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/revisiting-todo-of-this-site</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/revisiting-todo-of-this-site</guid>
        
        <category>todo</category>
        
        <category>admin</category>
        
        
      </item>
    
      <item>
        <title>Powershell Tips Notes</title>
        <description>&lt;p&gt;An ongoing accreted list of Powershell tips&amp;amp;tricks from multiple sources.&lt;/p&gt;

&lt;h1 id=&quot;powershell-tips-for-bash-users---fiveagency&quot;&gt;PowerShell tips for bash users - five.agency&lt;/h1&gt;

&lt;h2 id=&quot;xargs-and-for-loop&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; and for loop&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat dirs&lt;/span&gt; | %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;mkdir &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is no &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; command in PS, but you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt; loop and pass the piped variable &lt;code class=&quot;highlighter-rouge&quot;&gt;$_&lt;/code&gt; to the mkdir. Shorthand for &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;objects&quot;&gt;objects&lt;/h2&gt;
&lt;p&gt;There is practically no way to write a script even as simple as this one without using objects.&lt;/p&gt;

&lt;h1 id=&quot;powershell-101-from-a-linux-guy&quot;&gt;Powershell 101 From a Linux Guy&lt;/h1&gt;

&lt;h2 id=&quot;naming-convention&quot;&gt;Naming Convention&lt;/h2&gt;

&lt;p&gt;A decent naming convention to the cmdlets, which helps in guessing… &lt;strong&gt;Verb-SingularNoun&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;meta-info--help&quot;&gt;Meta Info &amp;amp; Help&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$PSVersionTable&lt;/span&gt;

update-help

&lt;span class=&quot;nb&quot;&gt;Get-Command&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# measure the time&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;measure-command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; -Filter &lt;span class=&quot;s2&quot;&gt;&quot;*.exe&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-object-in-place&quot;&gt;Use object in place&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.name

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.CreationTime

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Length
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;alias&quot;&gt;Alias&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;New-Alias&lt;/span&gt; -Name grep -Description grep &lt;span class=&quot;nb&quot;&gt;Select-String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/powershell-tips-notes</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/powershell-tips-notes</guid>
        
        <category>powershell</category>
        
        <category>tips</category>
        
        <category>notes</category>
        
        
      </item>
    
      <item>
        <title>Reading: Code Breakers</title>
        <description>&lt;p&gt;Quotes and notes from book ~Colin F. Barnes~ &lt;em&gt;Code Breakers: Alpha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When reading on Kindle, various highlightings and notes are accreted. These “Readings: XXX” series are my note recordings. As an English learner, some notes appeal to me for their mere language values and might not be related to the content of the book ;P. &lt;span id=&quot;side1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Might be better to have separate repo for these notes&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;alpha&quot;&gt;Alpha&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;… the Dome – before City Earth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A pairs of brass-rimmed goggles with darkened lenses appeared in the gap. They gave the fragile girl wearing them the countenance of a nervous lemur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… so – the words escaped him.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… the electric motors whined up to speed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… I don’t think this Jasper is the wet-behind-ears kid you think he is. That dude’s got some serious game face. He knows what’s going down.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ahead of him bright light reduced his pupils to dues specks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… her slow veins showed through like blue string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beth blushes further, turning her face away with all &lt;strong&gt;the subtle coyness of a vixen in heat&lt;/strong&gt;. &lt;strong&gt;Twirling a length of auburn hair around&lt;/strong&gt; her perfectly manicured finger, she bites her lip.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Petal smiled and shook her head. “You just like her bouncing tits.”&lt;/p&gt;

  &lt;p&gt;“What? No! That’s not what I–”&lt;/p&gt;

  &lt;p&gt;“Chill, Gez, I’m just &lt;strong&gt;yanking your chain&lt;/strong&gt;.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Having a heart gets ya killed, boy.”&lt;/p&gt;

  &lt;p&gt;“Don’t &lt;strong&gt;boy me&lt;/strong&gt;, old man…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The lights came on, blinding Gerry so that all he could see were the fine blood vessels backlit in his eyelids&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… the laser beams – illuminated by the rakish angle of the sun and the dusty particulate in the air.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Gabe’s eyebrows knitted together with incredulity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… Trust is a two-way street, and I only travel one way.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… a number of buildings appeared on the horizon: skyscrapers and many others in all kinds of sizes and shapes stood in the fog like grey fungi.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sitting made &lt;strong&gt;a bright flare explode&lt;/strong&gt; in his vision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;He stood and waited for &lt;strong&gt;his balance to re-calibrate&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… rippling with muscles beneath his dark form-fitting clothes, …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… I’ll &lt;strong&gt;patch in&lt;/strong&gt;.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;He admonished himself for being so neglectful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The heat of the shot boiled the blood so that a red mist fell upon the slumped body.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;AO – augmented overlay.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jachz blinked once and became still; so still that Gerry had a strange idea he might have perhaps crashed and was in need of a reboot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I can’t answer that, as I know not what I miss. One cannot wish for something one does not know or understand.”&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/reading-code-breakers</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/reading-code-breakers</guid>
        
        <category>reading</category>
        
        <category>notes</category>
        
        
      </item>
    
      <item>
        <title>A Reflection on Content Management</title>
        <description>&lt;p&gt;Just some thoughts on “How do I manage files/content on computers?”.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;I’ve been planing this post for quite some time, ever being a procrastinative type, sigh….&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;file&quot;&gt;File&lt;/h1&gt;

&lt;p&gt;Ironically, this is the most &lt;em&gt;intuitive&lt;/em&gt; way. &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; is a concept well-known, but very inflexible. Reasonably, it’s in fact the most &lt;em&gt;unintuitive&lt;/em&gt; way as it forces us to think in very low level that conceptually has nothing to do with what we really want: the &lt;strong&gt;content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a world more and more mobile-oriented, the role of files has receded. And yet it remains the most efficient method for managing simple content (like a post ;P).&lt;/p&gt;

&lt;h1 id=&quot;application&quot;&gt;Application&lt;/h1&gt;

&lt;p&gt;To center around an application is not new in mobile computation, but it only gets popular as a mindset with the rise of mobile devices. In the era of desktop, users use applications to accomplish tasks but yet they think in files instead of applications: a word document, a powerpoint file and etc. With mobile devices’ small screen estate, inconvenient inputs and on-the-go usage, navigating a file system becomes so cumbersome that most users would avoid.&lt;/p&gt;

&lt;p&gt;Applications strive to present content directly and intuitively. However, how to represent content has no universal consent. This creates a fragmented world with big players creating large closed circles by offering more integration within its own ecosystem but inconvenient, if even possible, interpolation with other applications. In retrospect, the very weakness of &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; concept is also its very strength: low-level but universal. Nevertheless, I still consider application-based content management is a breeze compared with files.&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content&lt;/h1&gt;

&lt;p&gt;I’d like to say this is the future, but I lack any confidence to say so as content representation is so diversified that any universal and yet high-level enough representation seems impossible.&lt;/p&gt;

&lt;p&gt;Computers are indeed becoming smarter though, so if we can have an intelligent personal assistance, then we might be able to think in a content-oriented way and be free of “opening this or that app for my work” lock-in. However, then we might be locked-in with a specific type of assistance system, right ;P&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/reflections-on-content-management</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/reflections-on-content-management</guid>
        
        
      </item>
    
      <item>
        <title>Adapt other than Configure</title>
        <description>&lt;p&gt;After many years of unscrutinized way of &lt;em&gt;configuring&lt;/em&gt; – try to make things “the right way”, I’ve realized that in many cases adaption is better. It offers the most smooth entry into new fields, more productivity from the very start and it’s also pedagogically the best way to learn from others. Configuring still matters but only when it really matters. Stay focused, unscrutinized configuring is essentially premature optimization.&lt;/p&gt;

&lt;p&gt;This serves as the first article written in &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; directly. Previously most of my blog articles are written in &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt;. I’ve been a long-time &lt;code class=&quot;highlighter-rouge&quot;&gt;org-mode&lt;/code&gt; user and have done quite a bit on how to author blogs with &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt;. However recently, after several attempts to fix my old configurations, I finally realized that all these struggles yield little return.&lt;/p&gt;

&lt;h1 id=&quot;configure&quot;&gt;Configure&lt;/h1&gt;
&lt;p&gt;Ever since I started playing with Linux back at my sophomore year in college, I’ve been juggling with all kinds of configurations: configure bash, configure the wifi, configure graphical cards, the audio cards, the CPU, the fan speed, and the editor – Emacs. I have been hooked up with the power of configuration: a lot of choices, your way, no lock-in, true understanding and etc. It used to be sweet.&lt;/p&gt;

&lt;p&gt;However, with the time passing by, things have changed: I’m getting old; Linux desktop is just a dream; mobile computation is the future; cloud computation creates closed circles with higher and higher walls; open source is becoming a super successful &lt;strong&gt;business&lt;/strong&gt; model; &lt;em&gt;Free Software&lt;/em&gt; feels outdated and not exciting at all.&lt;/p&gt;

&lt;p&gt;It came to my revelation that continuing the configuration path will only lead to isolation: if you prefer to install Linux only, you’ll miss all the new exciting hardware that just doesn’t ship with Linux driver support and you’ll miss all the discounts as Linux-only devices is a niche market that doesn’t enjoy the scale effect of popular consumer products. Even for the rare cases, you can theoretically get a new device to play nice with Linux, the setup can constantly get broken with updates or edge case usage and then you have to go through the search-try-and-error drill again and again. All these only for an inferior user experience that barely &lt;strong&gt;works&lt;/strong&gt;. What’s worse, the knowledge you gain by doing the chores receives diminishing return: new software and hardware are developing too fast for you to have time for deep understanding, you get to only know new terms and how to do specific stuff. Throw mobile and cloud into the mess, all become unwieldy.&lt;/p&gt;

&lt;p&gt;Enough is enough.&lt;/p&gt;

&lt;h1 id=&quot;adapt&quot;&gt;Adapt&lt;/h1&gt;
&lt;p&gt;All the talk on &lt;strong&gt;adapting&lt;/strong&gt; is truly about &lt;strong&gt;focus&lt;/strong&gt;. Maybe genius would be different, but for me, the world has become more and more complicated and time seems to be less and less. By yielding some controls, I can focus on what I can do best, a much more economical approach.&lt;/p&gt;

&lt;h2 id=&quot;follow-the-herd&quot;&gt;Follow the herd&lt;/h2&gt;
&lt;p&gt;The following is what I’ve been doing recently (not an exhaustive list by any measure):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Bought a new-model laptop preinstalled with &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows 10&lt;/code&gt;: arguably 10 sucks and is virtually a spyware, but it’s getting better fast, really &lt;em&gt;fast&lt;/em&gt; and I’m not really using it for things too sensitive.&lt;/li&gt;
  &lt;li&gt;Bought a non-Nexus cellphone of domestic brand (Meizu) bundled with private UI and applicatioins: it’s one of the best sale and thus really a bargain.&lt;/li&gt;
  &lt;li&gt;Install bloatware/spyware like &lt;code class=&quot;highlighter-rouge&quot;&gt;Weixin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;QQ&lt;/code&gt; and etc: no more preaching the merits of free protocols to my non-IT friends the next time they say: “talk to you on &lt;code class=&quot;highlighter-rouge&quot;&gt;Weixin&lt;/code&gt;”.&lt;/li&gt;
  &lt;li&gt;Use Windows/Android app for mails: goodbye &lt;code class=&quot;highlighter-rouge&quot;&gt;mu4e&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;offlineimap&lt;/code&gt; and their friends. It’s been good time together.&lt;/li&gt;
  &lt;li&gt;Use Chrome with &lt;code class=&quot;highlighter-rouge&quot;&gt;vimum&lt;/code&gt;, less keyboard-ish but better browsing experience: goodbye &lt;code class=&quot;highlighter-rouge&quot;&gt;firefox&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;palemoon&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;conkeror&lt;/code&gt;(really sad to see &lt;code class=&quot;highlighter-rouge&quot;&gt;conkeror&lt;/code&gt; go, I like it &lt;strong&gt;a lot&lt;/strong&gt;.)&lt;/li&gt;
  &lt;li&gt;Learn &lt;code class=&quot;highlighter-rouge&quot;&gt;Powershell&lt;/code&gt; to automate things on Windows: “No, thanks” for &lt;code class=&quot;highlighter-rouge&quot;&gt;Cygwin&lt;/code&gt;, been there, tried that. And &lt;em&gt;object&lt;/em&gt; shell is not that bad ;P&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;hexchat&lt;/code&gt; on Windows instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ERC&lt;/code&gt;: well, &lt;code class=&quot;highlighter-rouge&quot;&gt;hexchat&lt;/code&gt; is still a nerdy thing, but we’re talking about &lt;code class=&quot;highlighter-rouge&quot;&gt;IRC&lt;/code&gt; here ;P (PS: not that I have any complaints about &lt;code class=&quot;highlighter-rouge&quot;&gt;ERC&lt;/code&gt;, it’s just that I’m using &lt;code class=&quot;highlighter-rouge&quot;&gt;Emacs&lt;/code&gt; within a Virtualbox VM exclusively and being a VM it constantly gets paused, saved/restored, making it less suitable for a long-going background app)&lt;/li&gt;
  &lt;li&gt;Linux in a VM only. This is true both for my build machine on the server and my personal working environment. It’s just easier: the device driver support for Windows is almost zero-configured. With enough RAM, running a VM for coding is a valid option. I’ve been using this combination for half a year now. It’s super. (PS: this is where I think Linux really shines: as service runner and a developer tool.)&lt;/li&gt;
  &lt;li&gt;Use proprietary tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;WebStorm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;VS Code&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sublime Text&lt;/code&gt; instead of venerable Emacs for web development: less customization, more out-of-box integration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many changes happen within one or two months. I basically change half of my tools and workflow. You might think these changes would be very hard: &lt;strong&gt;NO&lt;/strong&gt;, it’s actually much easier and greatly improves my overall experience. By following the herd, I actually use mainstream tools developed&amp;amp;maintained by well-paid engineers and battle-tested by thousands of users. Most of the time, they just work out of the box. All I need to do is to adapt: give up some controls, learn their ways first and then see what changes we need to make, and usually you’ll find their way is actually better. Yes, it’s just simple like that.&lt;/p&gt;

&lt;h2 id=&quot;spacemacs&quot;&gt;Spacemacs&lt;/h2&gt;
&lt;p&gt;Weird maybe, I’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; as an example. &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it’s Emacs &lt;em&gt;and&lt;/em&gt; Vim!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, the four merits it touted on its website bear more meanings:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Four core pillars: Mnemonic, Discoverable, Consistent and “Crowd-Configured”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I think &lt;code class=&quot;highlighter-rouge&quot;&gt;Crowd-Configured&lt;/code&gt; is the jewelry on the crown. After all, you can arguably say the vanilla Emacs is also “Mnemonic, Discoverable, Consistent”. Well, to be fair, I think the vanilla Emacs has too much historical baggage and far less “Mnemonic, Discoverable, Consistent” than &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt;. I’ve long known this starter kit and heard a lot of good things about it, but not until my recent &lt;em&gt;adapt&lt;/em&gt; conviction I was too scared to use it. I’ve used Emacs for almost 7 years now and has accumulated my fair share of customization. Despite my inclination towards VIM’s modal editing style, I’ve backed off from change multiple times. “How can I throw away years of hard-earned muscle memory and carefully crafted personal configurations?! What’s the gain? Just to be VIM-like? Stupid!”&lt;/p&gt;

&lt;p&gt;Encouraged by my other &lt;em&gt;adapt&lt;/em&gt; successes, I started to try &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; for a third time (yes, a third time…). “Just let it go.” I told myself. “Do not think how can I do what I used to do. Think how Spacemacs handles these use cases. Learn like a newbie with an empty mind.” I have my first success with &lt;code class=&quot;highlighter-rouge&quot;&gt;org-mode&lt;/code&gt;, the killer application of Emacs IMO. I was trying to review my multi-megabytles agenda files, and navigating, state-changing, archiving, tree-manipulation are just &lt;strong&gt;so&lt;/strong&gt; easy with &lt;code class=&quot;highlighter-rouge&quot;&gt;evil-org&lt;/code&gt;: no more &lt;code class=&quot;highlighter-rouge&quot;&gt;C-M-x C-S-?&lt;/code&gt; stuff which requires my fingers spread&amp;amp;shift like a spider’s dancing. I then started to configure &lt;code class=&quot;highlighter-rouge&quot;&gt;mu4e&lt;/code&gt;(deprecated later), &lt;code class=&quot;highlighter-rouge&quot;&gt;org-agenda&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Emacs lisp&lt;/code&gt;. Lisp editing proved to be the hard one: the &lt;code class=&quot;highlighter-rouge&quot;&gt;lisp-state&lt;/code&gt; requires more modal-thinking than I’m comfortable with. However, after going through the early stage, I really start to appreciate the well-configured, discoverable functionalities: they are just there. This reminds me of my old MS Word experience: there must be a way to do this, you just need to look around and then the “Wow” moment. From this aspect, &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; is just great. Now I can reach near previous efficiency with lisp editing now and it’s just a week in &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt;. The experience has been so nice, I have switched default to &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; before writing this article.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I’ll still &lt;em&gt;configure&lt;/em&gt;, just not for everything. Only the area I focused on deserves much configuration. Other things I need? Go with mainstream, it helps.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use the best tool for the task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A well-known saying, but what many &lt;em&gt;free&lt;/em&gt;-minded developers do is often:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you have a hammer, you tend to see every problem as a nail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is particularly true for &lt;em&gt;open source&lt;/em&gt; tools: hey, just read the source and happy hacking :), isn’t? Now, I would say nope, there are better things to focus on.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/adapt-vs-configure</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/adapt-vs-configure</guid>
        
        <category>methodology</category>
        
        <category>philosophy</category>
        
        
      </item>
    
      <item>
        <title>Installing SLED 12 with PXE using libvirt</title>
        <description>&lt;p&gt;
Recently I get a task to fix a bug related to SLED in KVM. Since there is a
local PXE server for easy installation, I've planned to install SLED in KVM
through PXE. Here is the struggle I've been through.
&lt;/p&gt;

&lt;p&gt;
To get PXE installation work, I need to have a working bridge that will place VM
in the subnet with PXE server.
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;With &lt;code&gt;NetworkManager&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
&lt;code&gt;NetworkManager&lt;/code&gt; is buggy. Despite the fact you can use a GUI to set up a
bridge, you'll encounter various issues that make your life hard: 
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;The status indicator in the dialog is incorrect

&lt;p&gt;
A bridge is always on regardless.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Turning-off/Removal of an existing bridge is problematic.

&lt;p&gt;
Turning off doesn't seem to work. Remove a bridge in the dialog and yet this
bridge still exists.(verified using &lt;code&gt;nmcli con list&lt;/code&gt; or &lt;code&gt;btrctl show&lt;/code&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;Possible solution&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
The following procedure can be used to create a &lt;i&gt;useful&lt;/i&gt; bridge interface.
&lt;/p&gt;

&lt;p&gt;
Refer to &lt;a href=&quot;https://www.happyassassin.net/2014/07/23/bridged-networking-for-libvirt-with-networkmanager-2014-fedora-21/&quot;&gt;this article&lt;/a&gt; for detailed tips, basically:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Clean up existing profiles (as a safety measure).
&lt;/li&gt;
&lt;li&gt;Use the GUI only to create a bridge, set up slave interface and etc, but &lt;b&gt;NOT&lt;/b&gt;
  for anything else.
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;nmcli&lt;/code&gt; to bring up the bridge.

&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; up until &lt;code&gt;0.9.8&lt;/code&gt;, there is no feedback after &lt;code&gt;nmcli con up &amp;lt;args&amp;gt;&lt;/code&gt; and
even with some feedback in later versions, it's something like &quot;command sent
(DBus-activated successfully)&quot;. &lt;code&gt;DBus&lt;/code&gt; remote call guarantees no timing, you
need to &lt;b&gt;wait&lt;/b&gt; for a little while for things to settle down.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a id=&quot;sec-1-1-1&quot; name=&quot;sec-1-1-1&quot;&gt;&lt;/a&gt;Remove a bridge connection&lt;br  /&gt;&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
As mentioned above this part is buggy:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Remove the bridge connection in the &lt;code&gt;NM&lt;/code&gt; GUI interface.

&lt;p&gt;
Of course this does &lt;span class=&quot;underline&quot;&gt;NOT&lt;/span&gt; really do anything, but if you don't do it the
bridge will persists even after you have removed it with rest steps, which is
just more confusing.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Bring the bridge interface down.

&lt;p&gt;
Use &lt;code&gt;ip link set bridge0 down&lt;/code&gt;, instead of &lt;code&gt;ifdown&lt;/code&gt;, &lt;code&gt;btrctl&lt;/code&gt; or &lt;code&gt;nmcli con&lt;/code&gt;,
all of which will be obstructed by &lt;code&gt;NM&lt;/code&gt;. I think &lt;code&gt;ip link&lt;/code&gt; works at kernel
level directly.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Remove the bridge.

&lt;p&gt;
&lt;code&gt;btrctl delbr bridge0&lt;/code&gt; should pull the trick.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;The old good &lt;code&gt;CLI&lt;/code&gt; approach.&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
&lt;code&gt;systemctl disable network&lt;/code&gt; to turn off the &lt;code&gt;NetworkManager&lt;/code&gt;. All standard
procedures using &lt;code&gt;btrctl&lt;/code&gt; should work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Final tweak: STP.&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
The bridge interface created above will work &lt;b&gt;normally&lt;/b&gt;, but might &lt;b&gt;NOT&lt;/b&gt; with
&lt;code&gt;PXE&lt;/code&gt;. The problem here is with the &lt;code&gt;STP&lt;/code&gt;: &lt;a href=&quot;https://en.wikipedia.org/wiki/Spanning_Tree_Protocol&quot;&gt;Spanning Tree Protocol (wikipedia)&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It's a protocol to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Switching_loop&quot;&gt;Layer 2 switching loop&lt;/a&gt;, (&lt;a href=&quot;http://www.omnisecu.com/cisco-certified-network-associate-ccna/what-is-layer-2-switching-loop.php&quot;&gt;another article with
illustration&lt;/a&gt;) by creating a spanning tree in the network topology. In the
algorithm, there is a &lt;code&gt;blocking&lt;/code&gt; phase to listen on the coming/going packets to
gather information before any packets are forwarded. This delay would result in
a timeout error in &lt;code&gt;PXE&lt;/code&gt; connection.
&lt;/p&gt;

&lt;p&gt;
It's not recommended to disable &lt;code&gt;STP&lt;/code&gt;, but instead set &lt;code&gt;forward-delay&lt;/code&gt; to 0 as
instructed in &lt;a href=&quot;http://wiki.libvirt.org/page/PXE_boot_(or_dhcp)_on_guest_failed&quot;&gt;libvirt's FAQ about bridge&lt;/a&gt;. The &lt;code&gt;NetworkManager&lt;/code&gt; approach creates
bridges with 15 seconds delay as default, and the &lt;code&gt;CLI&lt;/code&gt; would create bridges
without &lt;code&gt;STP&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/installing-sled-12-with-pxe-using-libvirt</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/installing-sled-12-with-pxe-using-libvirt</guid>
        
        <category>libvirt</category>
        
        <category>sled</category>
        
        <category>bridge</category>
        
        <category>stp</category>
        
        
        <category></category>
        
        <category></category>
        
      </item>
    
      <item>
        <title>TODO (old page before 201608)</title>
        <description>&lt;i&gt;DISCLAIM: This post is the old TODO page. Archived as a psot for reference.&lt;/i&gt;
&lt;p&gt;
We list some long-term TODO entries here. For now only entries related to this
blog site are included.
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Blog Roadmap&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; Populate Wiki.&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
For quite a long time, we've built a &lt;code&gt;Git&lt;/code&gt; repo (locally called &lt;code&gt;ICWiki&lt;/code&gt; ;) that
collects bits of knowledge for personal use. This task is about itemize it and
put online under the &lt;code&gt;Wiki&lt;/code&gt; page.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; Post-navigation sidebar&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
Other than the current site-wide navigation, an article-wide navigation would
also be nice.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; Wiki Style Improvements &lt;code&gt;[0/2]&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a id=&quot;sec-1-3-1&quot; name=&quot;sec-1-3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; Sidebar Recent listing includes &lt;code&gt;Wiki&lt;/code&gt;&lt;br  /&gt;&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
Further include posts from all collections.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id=&quot;sec-1-3-2&quot; name=&quot;sec-1-3-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; Alphabetical Listing&lt;br  /&gt;&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;p&gt;
&lt;b&gt;Waiting for at least &amp;gt;50 entries to justify this task&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
List &lt;code&gt;Wiki&lt;/code&gt; entries alphabetically with each alphabet as a panel (would be a
good use case for &lt;code&gt;Bootstrap&lt;/code&gt; collapse panels).
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; Philosophy Collection&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
I'm not a philosopher by trade, but a philosophical man (self-titled :P). Over
the years, I have pondered on many different problems, aggregated some
&quot;interesting&quot; ideas. I've been through the stages: 
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
&quot;delusion of knowing all&quot; -&amp;gt; &quot;disillusion and break-down&quot; -&amp;gt; &quot;rebuilding&quot;
&lt;/pre&gt;

&lt;p&gt;
The years since the sophomore year in the college have not been good to me.
Though being accused of thinking too much, I start to find out it's the
opposite: I've known too little and I was too ignorant. And thus I need to
collect my thoughts, trace the roots, systematize the scattered ideas and learn
more.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/old-todo-page</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/old-todo-page</guid>
        
        <category>todo</category>
        
        <category>admin</category>
        
        
        <category></category>
        
        <category></category>
        
      </item>
    
      <item>
        <title>Java Programming Language Specification</title>
        <description>&lt;p&gt;
The last several weeks I've been skimming through &lt;i&gt;James Gosling&lt;/i&gt;, &lt;i&gt;Bill Joy&lt;/i&gt;,
&lt;i&gt;Guy Steel&lt;/i&gt;, &lt;i&gt;Gilad Bracha&lt;/i&gt;, &lt;i&gt;The Java&lt;sup&gt;TM&lt;/sup&gt; Language Specification - 3rd edition&lt;/i&gt;.
An old book, but I happen to have a printed version around. So I guessed that
reading through it would be helpful for me to understand language
specification in general.
&lt;/p&gt;

&lt;p&gt;
The main motive behind this endeavor is the revelation of the multitude of
languages that I have to work with these days. I've been following development
of JavaScript as well and there is a need to understand formal JS specification
as it constantly evolves.
&lt;/p&gt;

&lt;p&gt;
The overall experience is rewarding though I only managed to absorb tiny portion
from that book. Most Java specific parts are skipped. The following is the note
I've taken while reading.
&lt;/p&gt;

&lt;hr  /&gt;
&lt;hr  /&gt;
&lt;p&gt;
&lt;b&gt;Notes&lt;/b&gt;
&lt;/p&gt;
&lt;script src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
&lt;/script&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Goal&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Learn the conventions &amp;amp; terminology for language specification. 
&lt;b&gt;NOT Learning Java for now&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Lexical Grammar&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;raw stream of Unicode chars
&lt;/li&gt;
&lt;li&gt;translation (escaped Unicode char)
&lt;/li&gt;
&lt;li&gt;remove white space and comments
&lt;/li&gt;
&lt;li&gt;tokenized
&lt;/li&gt;
&lt;li&gt;syntactic grammar
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Extra Notes&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;In translation, the longest possible translation.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Syntactic Grammar&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
Tokens are the terminal symbols of the syntactic grammar.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Language Compatibility&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;language compatibility
&lt;/li&gt;
&lt;li&gt;platform compatibility
&lt;/li&gt;
&lt;li&gt;migration compatibility
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;code&gt;subtype&lt;/code&gt; and &lt;code&gt;supertype&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
&lt;code&gt;Subtyping&lt;/code&gt; does not extend through generic types: \( T&lt;:U \) does not imply that
\( C\langle T \rangle &lt;: C\langle U \rangle \).
&lt;/p&gt;

&lt;p&gt;
Here we need to understand that &lt;code&gt;subtype&lt;/code&gt; relationship is NOT the same as
&lt;code&gt;subset&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5-1&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; Some deep digging for the type system theory?&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-1&quot;&gt;
&lt;p&gt;
Related to set theory and category theory (all three seem to be able to serve as
a foundation of Math.)
&lt;/p&gt;

&lt;p&gt;
I've done some search on this topic, later fill this part with materials found.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; There is a clear separation of concepts between &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Class&lt;/code&gt;. Why?&lt;/h2&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;Bewildered concepts&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
Something we don't truly understand, but nevertheless widely seen.
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;heap pollution
&lt;/li&gt;
&lt;li&gt;capture conversion
&lt;/li&gt;
&lt;li&gt;unchecked warning
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Names&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Simple Names and Qualified Names
&lt;/li&gt;
&lt;li&gt;Names represent entities in a program
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Declarations&lt;/b&gt; with &lt;b&gt;Identifiers&lt;/b&gt; introduces entities that have &lt;b&gt;Names&lt;/b&gt; into program.

&lt;p&gt;
Names are constructed with identifiers. But not all identifiers are part of
Names (e.g. identifier used as label)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-8-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-8-1&quot;&gt;Scope&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Scope of a Declaration

&lt;p&gt;
The &lt;b&gt;scope of a declaration&lt;/b&gt; is the region of the program within which the
&lt;b&gt;entity&lt;/b&gt; declared by the declaration can be referred to with a &lt;b&gt;simple name&lt;/b&gt;
(provided it is visible, i.e. not shadowed).
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;code&gt;in scope&lt;/code&gt;
&lt;/li&gt;

&lt;li&gt;&lt;code&gt;shadowing&lt;/code&gt; vs &lt;code&gt;hiding&lt;/code&gt; vs &lt;code&gt;obscuring&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-8-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-8-2&quot;&gt;Name Obscuring&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-2&quot;&gt;
&lt;p&gt;
arise from the resolution of ambiguity of simple names in some contexts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-8-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-8-3&quot;&gt;Identifier&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-3&quot;&gt;
&lt;p&gt;
an unlimited-length sequence of &lt;span class=&quot;underline&quot;&gt;Java&lt;/span&gt; letters and &lt;span class=&quot;underline&quot;&gt;Java&lt;/span&gt; digits.
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;identifiers in labeled statement
&lt;/li&gt;
&lt;li&gt;$3.8
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;Packages&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-9-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-9-1&quot;&gt;storage&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;file

&lt;p&gt;
some limitation for this format
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;database
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-9-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-9-2&quot;&gt;compilation units&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;Definite Assignment&lt;/h2&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;Key references&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;$2.4
&lt;/li&gt;
&lt;li&gt;$6 Names

&lt;p&gt;
forms, scope, access
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Types-Programming-Languages-Benjamin-Pierce-ebook/dp/B00AJXZ5JE/ref=tmm_kin_title_0?_encoding=UTF8&amp;amp;sr=8-1&amp;amp;qid=1436357919&quot;&gt;Amazon.com: Types and Programming Languages eBook: Benjamin C. Pierce: Kindle Store&lt;/a&gt;
  A book on type theory.
&lt;/li&gt;

&lt;li&gt;$14.5 &quot;dangling else&quot; problem
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;Skipped&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;p&gt;
$8 - $11, from Classes to Exceptions
&lt;/p&gt;

&lt;p&gt;
$13 binary compatibility (dealing with updating widely deployed packages)
&lt;/p&gt;


&lt;hr  /&gt;
&lt;hr  /&gt;
&lt;p&gt;
&lt;b&gt;Notes End&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/java-programming-language-specification</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/java-programming-language-specification</guid>
        
        <category>java</category>
        
        <category>specification</category>
        
        <category>prog-lang</category>
        
        
        <category></category>
        
        <category></category>
        
      </item>
    
      <item>
        <title>A workflow for bug fixing</title>
        <description>&lt;p&gt;As a developer in SUSE Desktop Department, most of my work are bug fixing. Desktop bugs are diversified in nature: you constantly need to handle bugs from an unknown package or some esoteric features. To comb with this reality, I’ve been pondering on the proper methodology.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;About the diversities, here is a rhetoric saying with the &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pareto_principle&quot;&gt;80-20 principle&lt;/a&gt;&lt;/em&gt;: &lt;strong&gt;80% of the time we work with only 20% of the knowledge we need&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIM:&lt;/strong&gt; &lt;em&gt;this post has undergone some format conversions and the current formatting quality is not very good.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You want to learn! And not timid before the unknown.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SRN: Search, Read, Note and repeat.&lt;/p&gt;

    &lt;p&gt;One of my main complaints about my last job in a local company is that they have regulated web access excessively in the office: in order to search for information I have to use common terminals that are constantly in short. IMO, this restriction contributes as half to the failure of the new project as all other factors combined. From that time on, I decide that I should refuse to work on any new project without decent web access.&lt;/p&gt;

    &lt;p&gt;Document reading is a trait that I believe many interviewers have overlooked (at least no one ever asks me about this part). In today’s fast-paced world, technology evolves quickly. Reading is the best way to keep in sync with the new developments.&lt;/p&gt;

    &lt;p&gt;Noting is more about recording what you’ve found. You need to mark what info you think are more important, more relevant, what questions or unclear points you still have. For this purpose, pen&amp;amp;paper is always my favorite.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A logical workflow.&lt;/p&gt;

    &lt;p&gt;The first two steps help you become comfortable with a new package or field. After you’ve been briefed with the context and you need to handle the problem itself. The reality is we still know only very little so the previous steps tend to appear again and again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;my-workflow&quot;&gt;My workflow&lt;/h1&gt;

&lt;p&gt;In short: &lt;strong&gt;problem -&amp;gt; questions -&amp;gt; solutions -&amp;gt; actions&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Divide and rephrase the &lt;strong&gt;Problem&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;Bug reports from customers or QA are never the appropriate way you should think about the bugs. Reproduce the bugs, be creative, try out different cases. Play with the problem till you can divide/rephrase the problem in a way you’re confident it can be addressed technically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ask Questions.&lt;/p&gt;

    &lt;p&gt;What is this? Why something work in A situation but not B? How the other program handle this situation? What if I do this?&lt;/p&gt;

    &lt;p&gt;Whatever the question you ask or encounter. Do the SRN.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make the bold assumptions and leave questions unanswered.&lt;/p&gt;

    &lt;p&gt;A careful mind will always have more questions than what it can manage to answer in the limited period. Keep in mind the goal is fixing bugs, and questions can be dealt with by: &lt;strong&gt;making bold assumptions&lt;/strong&gt; if all known facts fit, &lt;strong&gt;unanswered&lt;/strong&gt; if not considered relevant, &lt;strong&gt;short answer&lt;/strong&gt; if that’s sufficient.&lt;/p&gt;

    &lt;p&gt;I’ve always found &lt;strong&gt;assumption&lt;/strong&gt; is a very effective way of moving things forward. A striking fact is human minds work similarly: many times what you think intuitively is not too far away from what others’ve done. As long as the exact detail is not needed, by making assumptions, we save us time and progress fast. (And there is little to lose, correct it if we assumed wrong.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Iteration till a solution comes to your mind.&lt;/p&gt;

    &lt;p&gt;There are no recipes for locating the solution. It comes to you at proper time ;P after enough work along the right direction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;a-workflow-example&quot;&gt;A workflow example&lt;/h1&gt;

&lt;p&gt;The rest of the article is a workflow document I’ve created while fixing a Desktop bug. It’s a reproduction as in work I actually only sketch on paper. I also would not include any references on the details because the outline is more important for ideas I’d like to share.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Related the component is in &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE Classic&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;extension.js&lt;/code&gt; part.&lt;/p&gt;

&lt;h2 id=&quot;rephrasing&quot;&gt;Rephrasing&lt;/h2&gt;

&lt;p&gt;As in my comment #3, the main issue is the misuse of GNOME Tweak tools.&lt;/p&gt;

&lt;p&gt;Two real bugs remain:
1.  Window buttons are not shown or displayed correctly across workspace.
2.  Nautilus has issue dealing with window grouping.&lt;/p&gt;

&lt;h2 id=&quot;workflow&quot;&gt;Workflow&lt;/h2&gt;

&lt;h3 id=&quot;facts--questions&quot;&gt;FACTS &amp;amp; Questions&lt;/h3&gt;

&lt;h4 id=&quot;done-how-windows-addremove-event-gets-detected&quot;&gt;DONE How windows add&amp;amp;remove event gets detected?&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this._workspaceSignals&lt;/code&gt; a hash map holds &lt;code class=&quot;highlighter-rouge&quot;&gt;window-added&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;window-removed&lt;/code&gt; listeners IDs.&lt;/p&gt;

&lt;p&gt;The listeners are working as expected.&lt;/p&gt;

&lt;h4 id=&quot;fact-the-grouping-works-correctly-in-one-single-workspace&quot;&gt;*FACT* The grouping works correctly in one single workspace.&lt;/h4&gt;

&lt;h5 id=&quot;done-q-how-and-can-we-duplicate-the-logic-to-multiple-workspaces&quot;&gt;DONE &lt;strong&gt;Q&lt;/strong&gt;: How? And can we duplicate the logic to multiple workspaces?&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_populateWindowList&lt;/code&gt; has check on the grouping setting. If the grouping is turned on, &lt;code class=&quot;highlighter-rouge&quot;&gt;AppButton&lt;/code&gt; is used, o/w &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowButton&lt;/code&gt; is employed.&lt;/p&gt;

&lt;h6 id=&quot;done-q-why-only-windows-in-current-ws-is-displayed-no-grouping-for-simplicity&quot;&gt;DONE &lt;strong&gt;Q&lt;/strong&gt; Why only windows in current WS is displayed? (no grouping for simplicity.)&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WindowList&lt;/code&gt; holds all window/app buttons. Each button is responsible for checking whether it should be displayed with regards to current workspace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App and Window Button have different visibility criteria&lt;/strong&gt;. More on this later.&lt;/p&gt;

&lt;h6 id=&quot;facts-appbutton-is-new-to-me&quot;&gt;&lt;strong&gt;FACTS&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;AppButton&lt;/code&gt; is new to me.&lt;/h6&gt;

&lt;p&gt;Two implications only happens to me later: bugs that were fixed for &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowButton&lt;/code&gt; should be ported to &lt;code class=&quot;highlighter-rouge&quot;&gt;AppButton&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;AppButton&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowButton&lt;/code&gt; are similar in nature but do &lt;strong&gt;NOT&lt;/strong&gt; share a same class hierarchy, which I believe is an issue.&lt;/p&gt;

&lt;p&gt;####### TODO Should &lt;code class=&quot;highlighter-rouge&quot;&gt;AppButton&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowButton&lt;/code&gt; has a same parent?&lt;/p&gt;

&lt;p&gt;To prevent duplicated code and emphasize the common role both play.&lt;/p&gt;

&lt;h4 id=&quot;done-q-why-switching-backforth-workspaces-fixes-button-issues&quot;&gt;DONE &lt;strong&gt;Q&lt;/strong&gt;: Why switching back&amp;amp;forth workspaces fixes button issues?&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_populateWindowList&lt;/code&gt; recreate all active window/app buttons, but this routine only run at &lt;code class=&quot;highlighter-rouge&quot;&gt;notify::allocation&lt;/code&gt;, which is &lt;strong&gt;NOT&lt;/strong&gt; triggered with workspace change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppButton&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;WindowButton&lt;/code&gt;, visibility check callback is hooked to &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-workspace&lt;/code&gt; signal.&lt;/p&gt;

    &lt;p&gt;This finding leads necessarily to the first solution.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;solution-missing-or-legacy-buttons&quot;&gt;Solution: missing or legacy buttons.&lt;/h3&gt;

&lt;h4 id=&quot;target-onwindowadded-grouped-branch&quot;&gt;TARGET: &lt;code class=&quot;highlighter-rouge&quot;&gt;_onWindowAdded&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;grouped&lt;/code&gt; branch.&lt;/h4&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;AppButton&lt;/code&gt; visibility update callback into &lt;code class=&quot;highlighter-rouge&quot;&gt;windows-change&lt;/code&gt; signal from &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellApp&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;fixes&quot;&gt;Fixes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;No button in new workspace if we open a new window for an already running application.&lt;/li&gt;
  &lt;li&gt;Remaining legacy button in a workspace after all windows of one application is closed. NOTE, the application is still running, i.e. it has opened window in some other workspace.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;solution-title-problem&quot;&gt;Solution: Title problem&lt;/h3&gt;

&lt;h4 id=&quot;facts&quot;&gt;&lt;strong&gt;FACTS&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Currently button title only gets updated with “windows-change”&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ] “windows-change” is signaled even only by switching workspace&lt;/p&gt;

    &lt;p&gt;This explains why switching fixes some issues. But why this event gets triggered?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;target-windowschanged&quot;&gt;TARGET: &lt;code class=&quot;highlighter-rouge&quot;&gt;_windowsChanged&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;There is a bug in original code. It doesn’t consider the case when an application has two single window in separate workspace as it does nothing if &lt;code class=&quot;highlighter-rouge&quot;&gt;this._windowTitle&lt;/code&gt; exists. Forcing update to fix this.&lt;/p&gt;

&lt;h4 id=&quot;fix&quot;&gt;Fix&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Incorrectly displayed title, see original bug report for detail.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;done-q-an-app-gets-its-window-list-on-current-workspace-specifically-for-nautilus&quot;&gt;DONE Q: an app gets its window list on current workspace? Specifically for &lt;code class=&quot;highlighter-rouge&quot;&gt;Nautilus&lt;/code&gt;.&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_getWindowList&lt;/code&gt; uses API &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell_app_get_windows&lt;/code&gt;, which returns &lt;strong&gt;all&lt;/strong&gt; windows belonging to a specific application.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;win.located_on_workspace(ws)&lt;/code&gt; is used to check whether &lt;code class=&quot;highlighter-rouge&quot;&gt;win&lt;/code&gt; is in &lt;code class=&quot;highlighter-rouge&quot;&gt;ws&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;solution-desktop-is-shown-as-a-window-in-the-panel-with-grouping-on&quot;&gt;Solution: Desktop is shown as a window in the panel with grouping on.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_getWindowList&lt;/code&gt; should only check window types. Only return window of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Meta.WindowType.NORMAL&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;done-q-why-an-nautilus-button-is-still-displayed-even-without-desktop&quot;&gt;DONE Q: Why an &lt;code class=&quot;highlighter-rouge&quot;&gt;Nautilus&lt;/code&gt; button is still displayed even without &lt;code class=&quot;highlighter-rouge&quot;&gt;Desktop&lt;/code&gt;.&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_updateVisibility&lt;/code&gt; uses API &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell_app_is_on_workspace&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;shell-app.c&lt;/code&gt;), which according to &lt;a href=&quot;https://mail.gnome.org/archives/commits-list/2011-January/msg04214.html&quot;&gt;this patch&lt;/a&gt;, will return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; for Desktop window (a workspace less window as we see).&lt;/p&gt;

&lt;h4 id=&quot;sol&quot;&gt;Sol&lt;/h4&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;(this._getWindowList() &amp;gt; 0)&lt;/code&gt; to test for visibility.&lt;/p&gt;

&lt;p&gt;This is safe as &lt;code class=&quot;highlighter-rouge&quot;&gt;shell_app_is_on_workspace&lt;/code&gt; uses the same logic. The only difference is application in STARTING status and workspaceless window, both should be ignored anyway.&lt;/p&gt;

&lt;h3 id=&quot;fact-if-grouping-is-enabled-context-menu-is-shaky-and-unusable-also-a-lot-of-stability-issue&quot;&gt;&lt;strong&gt;FACT:&lt;/strong&gt; If &lt;code class=&quot;highlighter-rouge&quot;&gt;grouping&lt;/code&gt; is enabled, context menu is shaky and unusable, also a lot of stability issue.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[X] “button-press-event” issue&lt;/li&gt;
  &lt;li&gt;[X] &lt;code class=&quot;highlighter-rouge&quot;&gt;this._contextMenuManager&lt;/code&gt; should remove &lt;code class=&quot;highlighter-rouge&quot;&gt;this._appContextMenu&lt;/code&gt; if there is a single application window.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-report&quot;&gt;Final Report&lt;/h2&gt;

&lt;p&gt;A patch has been submitted.&lt;/p&gt;

&lt;p&gt;Both issues for demonstration 1 and nautilus have been fixed for &lt;strong&gt;SLE Classic&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In short the original code contains multiple grouping bugs.&lt;/p&gt;

&lt;p&gt;Details: In total 4 separate bugs are identified and addressed.
1.  Failure to update buttons visibility when windows are added/removed for an application.
2.  Window title is not updated correctly.
3.  When deciding what windows should be displayed as buttons, failed to exclude abnormal windows like Nautilus Desktop.
4.  (Found in Development) Forget to manage &lt;sub&gt;appContextMenu&lt;/sub&gt;, which, with grouping on, leads to instability and focus grabbing issue for button context menu&lt;/p&gt;

&lt;p&gt;Further, I’ve overlooked AppButton in previous fix. So some patches for WindowButton is also ported to AppButton.&lt;/p&gt;

&lt;p&gt;∎ &lt;strong&gt;Example End&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jul 2015 16:18:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/a-workflow-for-bug-fixing</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/a-workflow-for-bug-fixing</guid>
        
        <category>bug-fix</category>
        
        <category>workflow</category>
        
        
      </item>
    
      <item>
        <title>From Text to simple UML diagram - Tools</title>
        <description>&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
I want to make some diagrams about my small project &lt;code&gt;etss&lt;/code&gt;. Simple class
diagrams and sequence diagrams would be enough.
&lt;/p&gt;

&lt;p&gt;
I started by drawing by hand, which soon strikes me that most of my fiddling
with the representations is repetitive&amp;amp;tedious. So I started to search for tools
that translate high-level textual representation into decent looking graphic
diagrams.
&lt;/p&gt;

&lt;p&gt;
I try to find some JavaScript libraries first as recently my main focus is on
Web tech. However, as the search goes on, I've found there are not many
JavaScript projects on UML actually. Tools like &lt;code&gt;jointjs&lt;/code&gt;, &lt;code&gt;draw2d&lt;/code&gt; are too much
for my purpose. In the end, I settle down on &lt;code&gt;PlantUML&lt;/code&gt;, a Java solution.
&lt;/p&gt;

&lt;p&gt;
The following is what IMHO that's worth noting.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;a href=&quot;http://plantuml.sourceforge.net/&quot;&gt;PlantUML&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
So far the most complete tool for generating UML from text.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Pros&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;The DSL is very intuitive, actually &lt;code&gt;bramp/js-sequence-diagrams&lt;/code&gt;'s DSL is
roughly based on it.
&lt;/li&gt;
&lt;li&gt;Very complete, the documentation and examples are amble.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Cons&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Written in Java (Do I still remember how to code Java?)
&lt;/li&gt;
&lt;li&gt;Web integration requires a 3rd party server to render UML image&amp;#x2026;.
&lt;/li&gt;
&lt;li&gt;Styles are not very modern, but acceptable any way.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Sequence Diagrams&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;&lt;a href=&quot;https://github.com/bramp/js-sequence-diagrams&quot;&gt;bramp/js-sequence-diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;/div&gt;&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a id=&quot;sec-3-1-1&quot; name=&quot;sec-3-1-1&quot;&gt;&lt;/a&gt;Pros&lt;br  /&gt;&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Simplest so far
&lt;/li&gt;
&lt;li&gt;The employed technology is easily understood.
&lt;/li&gt;
&lt;li&gt;The hand-drawn theme is great.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id=&quot;sec-3-1-2&quot; name=&quot;sec-3-1-2&quot;&gt;&lt;/a&gt;Cons&lt;br  /&gt;&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Not quite &lt;code&gt;UML&lt;/code&gt; like, the simple theme feels too simple.
&lt;/li&gt;
&lt;li&gt;Does't support quoted string, an issue opened by the author for now, #107.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;&lt;a href=&quot;http://jumly.tmtk.net/&quot;&gt;tmtk75/jumly&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;/div&gt;&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a id=&quot;sec-3-2-1&quot; name=&quot;sec-3-2-1&quot;&gt;&lt;/a&gt;Pros&lt;br  /&gt;&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-2-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Very modern, professional-UML looking. Built-in themes looks great.
&lt;/li&gt;
&lt;li&gt;Not using SVG, but DOM objects directly, so styling can be done with CSS.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id=&quot;sec-3-2-2&quot; name=&quot;sec-3-2-2&quot;&gt;&lt;/a&gt;Cons&lt;br  /&gt;&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-2-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;coffeescript&lt;/code&gt; and &lt;code&gt;stylus&lt;/code&gt; are used, which to me feels too hackishy.
&lt;/li&gt;
&lt;li&gt;The DSL feels too hackishy, not as intuitive as &lt;code&gt;plantUML&lt;/code&gt;.

&lt;p&gt;
? Maybe I can help improve on this.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Class/State Diagrams&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-4-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-1&quot;&gt;&lt;a href=&quot;http://www.nomnoml.com/&quot;&gt;nomnoml&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;
&lt;p&gt;
Web-based UML library, looks very promising. Though it doesn't support sequence
UML.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Flow Chart&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-5-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5-1&quot;&gt;&lt;a href=&quot;http://adrai.github.io/flowchart.js/&quot;&gt;flowchart.js&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-1&quot;&gt;
&lt;p&gt;
Useful to draw logic diagram about inner workings of complicated piece of code.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Other interesting diagram tools&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://modeling-languages.com/uml-tools/#textual&quot;&gt;A list of textual UML tools&lt;/a&gt;

&lt;p&gt;
Someone else keeps a list of textual tools.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.bottlecaps.de/rr/ui&quot;&gt;Railroad Diagram Generator&lt;/a&gt;

&lt;p&gt;
A tool for creating syntax diagrams. Together with &lt;code&gt;Jison&lt;/code&gt;, very handy when
you design some DSLs.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://timeline.knightlab.com/&quot;&gt;Timeline JS&lt;/a&gt;

&lt;p&gt;
In case you need to make a timeline about something in the web.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-7-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7-1&quot;&gt;&lt;a href=&quot;http://zaach.github.io/jison/&quot;&gt;Jison&lt;/a&gt;: JavaScript parser generator!&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-1&quot;&gt;
&lt;p&gt;
Good for designing DSL with JavaScript, I think, similar to &lt;code&gt;Bison&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Many tools above utilize this library.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7-2&quot;&gt;&lt;a href=&quot;http://willthompson.co.uk/bustle/&quot;&gt;Bustle&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-2&quot;&gt;
&lt;p&gt;
A &lt;code&gt;DBus&lt;/code&gt; monitor with sequence diagram, looks very cool. If you ever use the
default &lt;code&gt;dbus-monitor&lt;/code&gt;, you would appreciate the graphical representation ;P
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-7-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7-3&quot;&gt;&lt;a href=&quot;http://www.draw.io/&quot;&gt;draw.io&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-3&quot;&gt;
&lt;p&gt;
A nice in-browser IDE for drawing diagrams manually.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/from-text-to-simple-uml-diagram-tools</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/from-text-to-simple-uml-diagram-tools</guid>
        
        <category>uml</category>
        
        <category>diagram</category>
        
        
        <category></category>
        
        <category></category>
        
      </item>
    
  </channel>
</rss>
