<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crystal Sight</title>
    <description>See further, but how far is far?
</description>
    <link>http://carltonf.github.io/</link>
    <atom:link href="http://carltonf.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 16 Jul 2017 06:20:27 +0000</pubDate>
    <lastBuildDate>Sun, 16 Jul 2017 06:20:27 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Still Emacs, still Tufte</title>
        <description>&lt;p&gt;Quite long ago, I started to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Tufte&lt;/code&gt; style for my blog posts. The liquid
tags used is from &lt;code class=&quot;highlighter-rouge&quot;&gt;Immaculate&lt;/code&gt;. As with all plain-text formatting, these tags
eventually get in the way.&lt;span id=&quot;sn-tufte-tags&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;From Word-like WISIWIG to plain-text formats like the venerated &lt;code class=&quot;highlighter-rouge&quot;&gt;Tex&lt;/code&gt; or much simpler ones &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Org-mode&lt;/code&gt;, the key differences are &lt;strong&gt;whether&lt;/strong&gt; the formatting tags are seen and &lt;strong&gt;how demanding&lt;/strong&gt; the formatting requirement is. The formatting requirement of &lt;code class=&quot;highlighter-rouge&quot;&gt;Tufte&lt;/code&gt; style is more demanding than conventional markdown documents and thus the tags feel more cluttering.&lt;/span&gt; As a weekend project, I hacked a
&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-tufte&lt;/code&gt; extension for &lt;code class=&quot;highlighter-rouge&quot;&gt;Emacs&lt;/code&gt;. It help me cope with the
sidenote/marginnote &lt;em&gt;mess&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/still-emacs-still-tufte/markdown-tufte-screenshot.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above is the screenshot for the extension. You can find the code at
&lt;a href=&quot;#&quot;&gt;markdown-tufte&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And the rest of this post are some thoughts (murmuring).&lt;/p&gt;

&lt;h1 id=&quot;the-question-of-writing-too-little&quot;&gt;The question of writing too little&lt;/h1&gt;

&lt;p&gt;Often as it is, my thoughts upon why I’ve written so little did myself no good.
Nevertheless, this is still what I did in the last weekend.&lt;/p&gt;

&lt;p&gt;I thought that I was busy, that I was learning too many things in the meantime,
that I did not really write nothing as there are some unfinished drafts laying
around, that I was lazy and undisciplined, that the tool chain was too
complicated.&lt;/p&gt;

&lt;p&gt;All these &lt;em&gt;excuses&lt;/em&gt; have some truth in it. And I started with the tool chain -
the concrete one. &lt;span id=&quot;sn-excuses&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Yes, more disciplines about writing have been written down and I shall carry them out by the words! Well, at least so I claimed ;P&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-quest-for-better-tool&quot;&gt;The quest for better tool.&lt;/h2&gt;

&lt;p&gt;The old &lt;code class=&quot;highlighter-rouge&quot;&gt;habit&lt;/code&gt; tool was over-engineered and are being converted to simple bash
script. But for the weekend, I looked at the editor and the environment with/under
which I author and publish.&lt;/p&gt;

&lt;p&gt;Here are the requirements for the editor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vim-like keybinding: unrivalled for smooth &lt;em&gt;English&lt;/em&gt; post editing. &lt;span id=&quot;sn-english-editing&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
    &lt;span class=&quot;sidenote&quot;&gt;Maybe all alphabetical languages share similar features. Emacs are not that good at Chinese as word-level navigation is useless for Chinese.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Support Tufte style.&lt;/li&gt;
  &lt;li&gt;Almost all platform, at least &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Markdown, better with live preview. &lt;span id=&quot;sn-live-preview&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
    &lt;span class=&quot;sidenote&quot;&gt;I have doubts over the usefulness of live preview: they seem to be only useful, when one is new to the syntax of &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;, and it’s a great source of distraction.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;visual-studio-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Visual Studio Code&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;Behind the scene &lt;code class=&quot;highlighter-rouge&quot;&gt;VSCode&lt;/code&gt; uses the same technology as &lt;code class=&quot;highlighter-rouge&quot;&gt;Atom&lt;/code&gt; editor, and I like
Web technology pioneered by &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML5&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ES6_&lt;/code&gt;. To me, &lt;code class=&quot;highlighter-rouge&quot;&gt;VSCode&lt;/code&gt; is the best
offer from &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft&lt;/code&gt; to the open source community (other than &lt;code class=&quot;highlighter-rouge&quot;&gt;WLS&lt;/code&gt;, Windows
Linux Subsystem, maybe, if &lt;code class=&quot;highlighter-rouge&quot;&gt;WLS&lt;/code&gt; is more stable and has less edge corners.)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Well, if some day I do not use &lt;code class=&quot;highlighter-rouge&quot;&gt;Emacs&lt;/code&gt; any more, this would be my number 1
choice. Other than &lt;code class=&quot;highlighter-rouge&quot;&gt;Tufte&lt;/code&gt; support, it has everything I want. And it might just
take a few days hacking to put together an extension to add support for &lt;code class=&quot;highlighter-rouge&quot;&gt;Tufte&lt;/code&gt;
anyway.&lt;/p&gt;

&lt;p&gt;The problem is, for post writing, it doesn’t beat &lt;code class=&quot;highlighter-rouge&quot;&gt;Emacs&lt;/code&gt; and I know one thing
or two about how to write &lt;code class=&quot;highlighter-rouge&quot;&gt;ELisp&lt;/code&gt;, a plus for Emacs. If I need to do
some Web hacking, particularly in &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeScript&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;, it would be my
choice.&lt;/p&gt;

&lt;h3 id=&quot;rmarkdown&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RMarkdown&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A flavour of &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;RStudio&lt;/code&gt;. Among all other features, this one
supports &lt;code class=&quot;highlighter-rouge&quot;&gt;Tufte&lt;/code&gt; style.&lt;/p&gt;

&lt;p&gt;It’s just that &lt;code class=&quot;highlighter-rouge&quot;&gt;RStudio&lt;/code&gt; is a beast and I am not doing any data science, yet.
Also I only used &lt;code class=&quot;highlighter-rouge&quot;&gt;RStudio&lt;/code&gt; once before to learn some basics about &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; and it was
quite a while ago. The learning cost would be too high just for the posts.&lt;/p&gt;

&lt;h2 id=&quot;about-habit-and-discipline&quot;&gt;About Habit and Discipline&lt;/h2&gt;

&lt;p&gt;My previous English teacher Alex &lt;span id=&quot;sn-alex&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Just two weeks ago, we had the last class. He is a funny guy. His class makes you feel like a group of young folks chitchatting together, sharing childhood stories and small, funny quarrels with his Chinese girlfriend.&lt;/span&gt; said he forced himself to write
something in the early morning to form a habit of writing. Anything, anything
will do, even lines like &lt;em&gt;“I do not know why I am sitting here, I do not have
anything to write, and I just forced myself to do so. Oh, I just finish brushing
my teech and blabla”&lt;/em&gt;. And by this method, as he claimed, he manages to finish
writing a book about his 4-year stay in China.&lt;/p&gt;

&lt;p&gt;I should learn something from this.&lt;/p&gt;

&lt;h2 id=&quot;less-discipline&quot;&gt;Less Discipline&lt;/h2&gt;

&lt;p&gt;While writing this post, I noticed what a bliss it is not to try to get
reference for everything. I &lt;a href=&quot;/writing-habit-and-tools#fledging&quot;&gt;wrote once&lt;/a&gt; before that references are
important. I still believe so, but the extra work for references might as well
cost my writing productivity. As thus the benefits do not justify the cost.
&lt;strong&gt;Let’s only make important references for important posts&lt;/strong&gt;. And along this
line we should relax some of the rules I laid before about writing to encourage
writing more.&lt;/p&gt;

&lt;h1 id=&quot;ending&quot;&gt;Ending&lt;/h1&gt;

&lt;p&gt;Well, this post also serves as a test ground for the &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-tufte&lt;/code&gt; extension,
so far so good. Happy posting now ;)&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/still-emacs-still-tufte</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/still-emacs-still-tufte</guid>
        
        <category>tech</category>
        
        <category>markdown</category>
        
        <category>tufte</category>
        
        <category>emacs</category>
        
        <category>writing</category>
        
        
      </item>
    
      <item>
        <title>Understand 'Just Enough' GObject For Code Reading</title>
        <description>&lt;p&gt;Without referring to &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; documentation or any online posts &lt;span id=&quot;sn-doc&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;For the record, I can not claim I have never been exposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; materials. The best I can say is that I haven’t &lt;em&gt;systematically&lt;/em&gt; learnt &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt;.&lt;/span&gt;, understand &lt;em&gt;just enough&lt;/em&gt; knowledge about &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; for the
purpose of reading related code. The process is question-driven and
code-inspired.&lt;/p&gt;

&lt;p&gt;Reading code is essentially an activity in which readers trace the control flow
(i.e. function calls), state transitions (i.e. variable values) from &lt;em&gt;interested
points&lt;/em&gt; &lt;span id=&quot;sn-interested-points&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Say the point where an error in the log is printed. Or &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function, public API entries and etc.&lt;/span&gt; to a point where readers
claim &lt;em&gt;sufficient&lt;/em&gt; understanding is attained &lt;span id=&quot;sn-sufficient-understanding&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Say points where a bug has been identified or mis-configured environment has been confirmed.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;To understand &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; for reading code is to be able to trace method calls,
property changes. This is a problem for &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; because some C tricks (most
are intricate macros) are employed to implement some OOP features and they are
not at all obvious. Further, for the purpose of reading &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; code, I do not
need to understand how the macro magic work.&lt;/p&gt;

&lt;h1 id=&quot;for-the-impatience&quot;&gt;For the Impatience&lt;/h1&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;This section was added after the main body was finished. The whole argument
below is quite lengthy and murky. Maybe it’s better to summarize what I’ve
learnt through the process beforehand.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The procedure I would form with this &lt;em&gt;just enough&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; knowledge is as
follows:&lt;/p&gt;

&lt;p&gt;Look for class hierarchical info through file dependencies (includes), and
&lt;code class=&quot;highlighter-rouge&quot;&gt;parent_XXX&lt;/code&gt; members. Locate the exact method used in the polymorphism by
looking at explicit reference of the &lt;em&gt;real&lt;/em&gt; class type, usually this happens in
the abstract, parent class. As instantiation is poorly comprehended, state
changes (updates to variable member) can be hard to track. Pay special attention
to naming, signals and callbacks. Overall, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt; experience from other
languages as direction, naming as hints, take bold &lt;code class=&quot;highlighter-rouge&quot;&gt;jumps of faith&lt;/code&gt; to form a
&lt;em&gt;useful&lt;/em&gt; understanding.&lt;/p&gt;

&lt;h1 id=&quot;explain-the-terms&quot;&gt;Explain the Terms&lt;/h1&gt;

&lt;h2 id=&quot;question-driven&quot;&gt;Question Driven&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;question-driven&lt;/em&gt; is to start with questions about &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt;. Being an &lt;code class=&quot;highlighter-rouge&quot;&gt;OO&lt;/code&gt;
implementation for C, basically we’re asking about how Object-Oriented features
are achieved in &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Where&amp;amp;How a class is defined?&lt;/li&gt;
  &lt;li&gt;How the class inheritance is defined?&lt;/li&gt;
  &lt;li&gt;What are the common implicit members?&lt;/li&gt;
  &lt;li&gt;How an instance is &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;-ed?&lt;/li&gt;
  &lt;li&gt;How &lt;code class=&quot;highlighter-rouge&quot;&gt;polymorphism&lt;/code&gt; is implemented? (or how &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; pointer is understood.)&lt;/li&gt;
  &lt;li&gt;What are those &lt;code class=&quot;highlighter-rouge&quot;&gt;signals&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;code-inspired&quot;&gt;Code Inspired&lt;/h2&gt;

&lt;p&gt;Read &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; code directly and use the code snippet to figure out answers to
above questions.&lt;/p&gt;

&lt;p&gt;In the following, I’m using code from &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session-3.20.2&lt;/code&gt; as example.&lt;/p&gt;

&lt;h1 id=&quot;just-enough-gobject&quot;&gt;Just Enough &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;wherehow-a-class-is-defined&quot;&gt;Where&amp;amp;How a class is defined?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Where&lt;/em&gt; is relatively simple as Class is meant for reuse and thus the
declaration must be some headers.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;Technically, we should be looking at the block between &lt;code class=&quot;highlighter-rouge&quot;&gt;G_BEGIN_DECLS&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;G_END_DECLS&lt;/code&gt;. However these two are not helpful in identifying the class we’re
interested in. Together with boilerplates like &lt;code class=&quot;highlighter-rouge&quot;&gt;GSM_TYPE_APP&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GSM_APP_CLASS&lt;/code&gt;
and etc., these are intuitively understood as the &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; &lt;em&gt;magic&lt;/em&gt; and should
be skimmed over when reading the code.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-app.h
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmApp&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmAppClass&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;GsmAppClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmAppPrivate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsmAppPrivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even from above, the verbosity of &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; in C is obvious. &lt;code class=&quot;highlighter-rouge&quot;&gt;Class&lt;/code&gt; and its
&lt;code class=&quot;highlighter-rouge&quot;&gt;Instance&lt;/code&gt; have their separate types. &lt;code class=&quot;highlighter-rouge&quot;&gt;Data Hiding&lt;/code&gt; is achieved by &lt;em&gt;explicitly&lt;/em&gt;
putting internal details into a &lt;code class=&quot;highlighter-rouge&quot;&gt;XXXPrivate&lt;/code&gt; type.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-app.h
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmApp&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GObject&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsmAppPrivate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmAppClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GObjectClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* signals */&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;guchar&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ... more
&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* virtual methods */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                       &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ... many more
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_is_conditionally_disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;gsm_app_start&lt;/span&gt;                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                         &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;gsm_app_peek_is_conditionally_disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;priv&lt;/code&gt; of type &lt;code class=&quot;highlighter-rouge&quot;&gt;GsmAppPrivate *&lt;/code&gt; is only a member of &lt;code class=&quot;highlighter-rouge&quot;&gt;_GsmApp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XXXPrivate&lt;/code&gt;
must be a collection of state variables for instances. The naming &lt;code class=&quot;highlighter-rouge&quot;&gt;parent_class&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt; member has suggested that they are what &lt;em&gt;marks&lt;/em&gt; the inheritance
relationship.&lt;/p&gt;

&lt;p&gt;Two things are of more considerations: the “virtual methods” comment and
consistent naming of functions following the &lt;code class=&quot;highlighter-rouge&quot;&gt;_GsmAppClass&lt;/code&gt; declaration.
Intuitively, I thought methods of an object are pointers to functions. Later,
we’ll see it turns out that methods are mere functions with the first argument
being the object itself. &lt;span id=&quot;sn-method-function&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Maybe this is a way to avoid duplications. Or more importantly, it’s so because of the lack of auto &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; pointer for methods in C. Indeed, &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-&amp;gt;method(obj, arg1, arg2)&lt;/code&gt; feels more verbose and confusing than &lt;code class=&quot;highlighter-rouge&quot;&gt;type_method(obj, arg1, arg2)&lt;/code&gt; as in the former the term &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; shows up twice.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-is-the-class-inheritance-defined&quot;&gt;How is the class inheritance defined?&lt;/h2&gt;

&lt;p&gt;As seen above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;parent_class&lt;/code&gt; are what define the inheritance
relationship among classes. Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; has no awareness of class and
objects, there is no easy &lt;code class=&quot;highlighter-rouge&quot;&gt;UML&lt;/code&gt; diagram to be drawn. However, by inspecting the
dependencies (include/includeby) within the source, we can still easily see
this relationship in graph as
&lt;a href=&quot;/images/understand-minimal-gobject-for-code-reading/ArchInternalDependencies-gsm-app-client.png&quot;&gt;this diagram&lt;/a&gt;
show. &lt;span id=&quot;sn-dep-diagram&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Another interesting point revealed in the diagram is the &lt;em&gt;empty&lt;/em&gt; dependency from &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-app&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-client&lt;/code&gt;, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-client.h&lt;/code&gt; is included in &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-app.h&lt;/code&gt; but nothing is used from &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-client.h&lt;/code&gt;. Though this might be a mere historical residual, it suggests some connection between &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;. Indeed, &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; once started is a &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;. (And there can be more interconnections.)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;From the dependency graph, we see clearly that &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-autostart-app&lt;/code&gt; is a
subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-app&lt;/code&gt;, which is also shown in the code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-autostart-app.h
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmAutostartApp&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;GsmAutostartAppPrivate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmAutostartAppClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsmAppClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* signals */&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition_changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-are-the-common-implicit-members&quot;&gt;What are the common implicit members?&lt;/h2&gt;

&lt;p&gt;By &lt;code class=&quot;highlighter-rouge&quot;&gt;implicit&lt;/code&gt;, I mean members and methods created, used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; macro
magic. They show up naturally when we trace some &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; functions and find
their declarations/usages are nowhere within the source tree. &lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_init&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_contructor&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_dispose&lt;/code&gt; are most noticed ones. Though it’s relatively
easy to pick these &lt;em&gt;magic elements&lt;/em&gt; out, it proved to be hard to see the exact
interconnections between them.&lt;/p&gt;

&lt;h2 id=&quot;how-an-instance-is-new-ed&quot;&gt;How an instance is &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;-ed?&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;The arguments made in this section is much less plausible than others. It turned
out to be quite hard to formalize &lt;em&gt;the guesswork&lt;/em&gt; done during the analysis.
Nevertheless, to complete the project of this post, I proceeded to write out my
thoughts, with &lt;em&gt;best efforts&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The instantiation of objects turns out to be a hard procedure to get to the
exact details. Much of the difficulty stems from the mystical interactions among
implicit members. However, with some &lt;em&gt;jumps&lt;/em&gt; (hypothesis), we might still be
able to to understand the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we notice many methods &lt;code class=&quot;highlighter-rouge&quot;&gt;impl_XXX&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-app&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. With the
lack of &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;-ish functions, let’s assume &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-app&lt;/code&gt; is &lt;em&gt;abstract&lt;/em&gt; and can not
have any instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, let’s turn to &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-autostart-app&lt;/code&gt;. There is &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm_autostart_app_new&lt;/code&gt;,
which seems to be the only generator of &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-autostart-app&lt;/code&gt; externally.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-manager.c
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add_autostart_app_internal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;is_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gsm_autostart_app_new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm_autostart_app_new&lt;/code&gt; looks bizarre for our
&lt;em&gt;untrained&lt;/em&gt; eyes.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-autostart-app.c
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gsm_autostart_app_new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desktop_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_initable_new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GSM_TYPE_AUTOSTART_APP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                         &lt;span class=&quot;s&quot;&gt;&quot;desktop-filename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desktop_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                         &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The doc on &lt;code class=&quot;highlighter-rouge&quot;&gt;g_initable_new&lt;/code&gt; says something about
&lt;a href=&quot;https://developer.gnome.org/gio/stable/GInitable.html#g-initable-new&quot;&gt;“failable object initialization”&lt;/a&gt;.
The declaration of the function itself looks like:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * https://developer.gnome.org/gio/stable/GInitable.html#g-initable-new
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gpointer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g_initable_new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;GCancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancellable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gchar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_property_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
                
&lt;span class=&quot;c1&quot;&gt;// The '...' means that the value if the first property, followed by and other
// property value pairs, and ended by NULL. 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The ending &lt;code class=&quot;highlighter-rouge&quot;&gt;varargs&lt;/code&gt; of key-value pairs are of particular interests. The
following &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm_autostart_app_initable_init&lt;/code&gt; has already started to use
&lt;code class=&quot;highlighter-rouge&quot;&gt;desktop-filename&lt;/code&gt; property.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-autostart-app.c
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gsm_autostart_app_initable_init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GInitable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;GCancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancellable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsmAutostartApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GSM_AUTOSTART_APP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;g_assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desktop_filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_desktop_app_info_new_from_filename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desktop_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where the property &lt;code class=&quot;highlighter-rouge&quot;&gt;desktop-filename&lt;/code&gt; is installed:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gsm_autostart_app_class_init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmAutostartAppClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GObjectClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_OBJECT_CLASS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_object_class_install_property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                         &lt;span class=&quot;n&quot;&gt;PROP_DESKTOP_FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                         &lt;span class=&quot;n&quot;&gt;g_param_spec_string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;desktop-filename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                              &lt;span class=&quot;s&quot;&gt;&quot;Desktop filename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                              &lt;span class=&quot;s&quot;&gt;&quot;Freedesktop .desktop file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                              &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                              &lt;span class=&quot;n&quot;&gt;G_PARAM_READWRITE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_PARAM_CONSTRUCT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve assumed &lt;code class=&quot;highlighter-rouge&quot;&gt;desktop-filename&lt;/code&gt; is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;app-&amp;gt;priv-&amp;gt;desktop_filename&lt;/code&gt;.
From these, it’s reasonable to say &lt;code class=&quot;highlighter-rouge&quot;&gt;g_initable_new&lt;/code&gt; call above is the very call
that instantializes an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, Similar arguments can also be made about other parts of the
instantiation process. From the various function names and comparison with
similar functions in &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-app&lt;/code&gt;, the &lt;em&gt;educated guess&lt;/em&gt; we can have about the
instantiation process is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_new&lt;/code&gt; is the method to &lt;em&gt;start&lt;/em&gt; instantializing an object. It’s likely
there are other types of &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; offered by &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; other than
&lt;code class=&quot;highlighter-rouge&quot;&gt;g_initable_new&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_class_init&lt;/code&gt; will get called if the &lt;em&gt;class data&lt;/em&gt; have not
initialized. This may happen only once as all instance share the same &lt;em&gt;class
data&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_constructor&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_init&lt;/code&gt; will get called &lt;em&gt;after&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;XXX_class_init&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-polymorphism-is-implemented&quot;&gt;How &lt;code class=&quot;highlighter-rouge&quot;&gt;polymorphism&lt;/code&gt; is implemented?&lt;/h2&gt;

&lt;p&gt;This is already shown in previous code snippets. In short, &lt;code class=&quot;highlighter-rouge&quot;&gt;polymorphism&lt;/code&gt; is
achieved explicitly with boilerplate code.&lt;/p&gt;

&lt;p&gt;Take method &lt;code class=&quot;highlighter-rouge&quot;&gt;impl_start&lt;/code&gt; as example.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-app.h
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GsmAppClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* virtual methods */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                       &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;gsm_app_start&lt;/span&gt;                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                         &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-app.c
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gsm_app_class_init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmAppClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gboolean&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gsm_app_start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmApp&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;GError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_debug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Starting app: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GSM_APP_GET_CLASS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm_app_start&lt;/code&gt; shows the explicit reference to the &lt;em&gt;real&lt;/em&gt;
class of &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;GSM_APP_GET_CLASS&lt;/code&gt; macro. &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-app&lt;/code&gt; is abstract and have
&lt;code class=&quot;highlighter-rouge&quot;&gt;impl_start&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. And for &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-autostart-app&lt;/code&gt;, it indeed sets its own
&lt;code class=&quot;highlighter-rouge&quot;&gt;impl_start&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * SP2_GNOME_SESSION:/gnome-session/gsm-autostart-app.c
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gsm_autostart_app_class_init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsmAutostartAppClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GObjectClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_OBJECT_CLASS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GsmAppClass&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GSM_APP_CLASS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;app_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gsm_autostart_app_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So the public API for consumers of &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm-XXX-app&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;gsm_app_start&lt;/code&gt; and this can
be verified by looking up its references within the source tree.&lt;/p&gt;

&lt;h2 id=&quot;what-are-those-signals&quot;&gt;What are those &lt;code class=&quot;highlighter-rouge&quot;&gt;signals&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;This is a question we can ask only after reading the code.&lt;/p&gt;

&lt;p&gt;From above snippets, we’ve seen a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;signal&lt;/code&gt; declaration, which is not
typical among other &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt; languages. For the purpose of understanding, most of
time they are no different than other event-driven pattern, and can be handled
as such safely. We only need to pay attention to property names, callbacks and etc,
just like the above &lt;code class=&quot;highlighter-rouge&quot;&gt;desktop-filename&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;after-thoughts&quot;&gt;After Thoughts&lt;/h1&gt;

&lt;p&gt;While writing down the above process, I frequently doubted the usefulness of
doing them at all. Whatever the little understanding I &lt;em&gt;claim&lt;/em&gt; to achieve above
is abysmal compared to what I would have &lt;em&gt;gained&lt;/em&gt; in, say 2 hours of, reading
&lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; documentation. However, I still completed the post for two reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;em&gt;guesswork&lt;/em&gt; process, inaccurate as it is, is very typical for code
reading. And we’re usually not that fortunate to have a well-polished
documentation as that of &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt;. Forming the &lt;em&gt;gut feelings&lt;/em&gt; in the &lt;em&gt;guess&lt;/em&gt;
has proved to be arduous but fruitful.&lt;/li&gt;
  &lt;li&gt;The possible enlightenment I’ll have when I learn &lt;code class=&quot;highlighter-rouge&quot;&gt;GObject&lt;/code&gt; systematically.
The reward might be some great revelation about the &lt;code class=&quot;highlighter-rouge&quot;&gt;guesswork&lt;/code&gt; process that
can improve my code reading skill a lot.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/understand-minimal-gobject-for-code-reading</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/understand-minimal-gobject-for-code-reading</guid>
        
        <category>tech</category>
        
        <category>gobject</category>
        
        <category>code-reading</category>
        
        <category>question-driven</category>
        
        <category>gnome</category>
        
        
      </item>
    
      <item>
        <title>Code-Reading: The Racing Of Two Agents</title>
        <description>&lt;p&gt;From a bug due to a race condition between two polkit agents, this post explain
the handling of the startup components and autostart apps within &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;components&quot;&gt;Components&lt;/h1&gt;

&lt;h2 id=&quot;gnome-session&quot;&gt;GNOME Session&lt;/h2&gt;

&lt;p&gt;Other than the X server, &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt;&lt;span id=&quot;sn-gs-name&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;In SP2, the &lt;code class=&quot;highlighter-rouge&quot;&gt;comm&lt;/code&gt; is actually called &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session-binary&lt;/code&gt; which is &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;-ed from a shell script called &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt;. This indirection is meant to solve a environment passing bug. A very interesting problem worth a separate post.&lt;/span&gt; is the daemon managing
all the &lt;em&gt;interesting&lt;/em&gt; stuff within a &lt;em&gt;session&lt;/em&gt;. For our purpose, the startup
sequence is of most interest to us.&lt;span id=&quot;sn-endsession&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;There is a &lt;a href=&quot;#&quot;&gt;Code-Reading(PLANNED)&lt;/a&gt; post covering the end session part as well.&lt;/span&gt; Other
components talk back to &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt; through the exported DBus service
&lt;code class=&quot;highlighter-rouge&quot;&gt;org.gnome.SessionManager&lt;/code&gt;. The term &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionManager&lt;/code&gt; is used interchangable
with &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt; does have some documentations oneline. However, they all seem to
be outdated (compared the info I got from the code.). Nevertheless, they still
provide some insights and you can find the &lt;a href=&quot;https://wiki.gnome.org/Projects/SessionManagement/GnomeSession&quot;&gt;longer version&lt;/a&gt;
and &lt;a href=&quot;https://wiki.gnome.org/Projects/SessionManagement/NewGnomeSession&quot;&gt;the newer, shorter version&lt;/a&gt; here.&lt;/p&gt;

&lt;h3 id=&quot;saved-session&quot;&gt;Saved Session&lt;/h3&gt;

&lt;p&gt;The concept of &lt;em&gt;a saved session&lt;/em&gt; is also important for our discussion. Bascially
the session will try to save all the open apps and their &lt;em&gt;states&lt;/em&gt; upon logout
and restores these saved apps at the next login. There seems to be a
protocol(part of &lt;a href=&quot;https://www.x.org/releases/X11R7.6/doc/libSM/xsmp.html&quot;&gt;XSMP&lt;/a&gt;) on this saving behavior, however it doesn’t seem to be
well supported among apps, not even within GNOME. &lt;span id=&quot;sn-xsmp&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Much earlier there was a bug about saved sessions. The previous investigation convinced me that this feature is deprecated and not maintained in the upstream.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Without delving into details about &lt;code class=&quot;highlighter-rouge&quot;&gt;XSMP&lt;/code&gt;, it’s sufficient to show saved
session’s desktop files here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt; normal app desktop, shell desktop files&lt;/p&gt;

&lt;h2 id=&quot;gnome-shell&quot;&gt;GNOME Shell&lt;/h2&gt;

&lt;p&gt;Normally the agent &lt;a href=&quot;https://github.com/GNOME/gnome-shell/tree/3.20.4/js/ui/components/polkitAgent.js&quot;&gt;built into&lt;/a&gt; the Shell is what users use. As
Shell is the &lt;em&gt;required app&lt;/em&gt; (and thus an &lt;em&gt;autostart app&lt;/em&gt;) for &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt;,
it’s handled slightly different from other &lt;em&gt;clients&lt;/em&gt;, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt; will
try to restart these apps if they die and end the current session if a required
component fails too often. &lt;span id=&quot;sn-required-app&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Q: Is this really the specialty for &lt;em&gt;required app&lt;/em&gt;? Further, I’m puzzled by the line &lt;code class=&quot;highlighter-rouge&quot;&gt;X-GNOME-AutoRestart=false&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Required apps are defined in &lt;a href=&quot;https://github.com/GNOME/gnome-session/tree/eba0460033804d2d5ce60953c76fd75f396cc43e/data/gnome.session.desktop.in.in&quot;&gt;session key file&lt;/a&gt; by
&lt;a href=&quot;https://github.com/GNOME/gnome-session/tree/eba0460033804d2d5ce60953c76fd75f396cc43e/gnome-session/gsm-session-fill.c#L206&quot;&gt;searching predefined locations&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;On failure, required apps are restarted automatically. Until a limit is
reached, the whole session ends with failure.&lt;/li&gt;
  &lt;li&gt;The naming for &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME Shell&lt;/code&gt; as a component is &lt;a href=&quot;https://github.com/GNOME/gnome-shell/tree/3.20.4/data/org.gnome.Shell.desktop.in.in&quot;&gt;org.gnome.Shell&lt;/a&gt;. However,
it’s worth citing the desktop file here:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Application&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;_Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GNOME Shell&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;_Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Window management and application launching&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@bindir@/gnome-shell&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;NoDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;X-GNOME-Autostart-Phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DisplayServer&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;X-GNOME-Provides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;panel;windowmanager;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;X-GNOME-Autostart-Notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;X-GNOME-AutoRestart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;polkit-gnome&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A separate, independent polkit agent that can work outside GNOME ecosystem. The
executable, named &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome-authentication-agent-1&lt;/code&gt;, installed under
&lt;code class=&quot;highlighter-rouge&quot;&gt;@LIBDIR&lt;/code&gt; (usually &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/lib/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The current distribution still ships an autostart desktop file. &lt;span id=&quot;sn-pkgnome-desktop&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The earliest entry in the changelog on this desktop file is &lt;em&gt;“Add as a source a .desktop file to start polkit agent: it was removed from tarball, but we still need it.”&lt;/em&gt; &lt;a href=&quot;https://github.com/GNOME/PolicyKit-gnome/commit/47ca445decf21b8de13d804b870d6ce171bad306&quot;&gt;Here&lt;/a&gt; seems to be the upstream commit that removed this file.&lt;/span&gt; Much of the problem is caused by this file and
its content is worthy full citation here:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# polkit-gnome-authentication-agent-1.desktop.in
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PolicyKit Authentication Agent&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PolicyKit Authentication Agent&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@LIBDIR@/polkit-gnome-authentication-agent-1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Application&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;NoDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;NotShowIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;KDE;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;AutostartCondition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GNOME3 unless-session gnome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AutostartCondition&lt;/code&gt; doesn’t seem to be well documented, but it means that
this agent should be automatically started on login if the session &lt;em&gt;is of&lt;/em&gt;
‘&lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME3&lt;/code&gt; but not &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome&lt;/code&gt;‘&lt;span id=&quot;sn-GNOME3-not-gnome&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;I was going to say &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-fallback&lt;/code&gt;, which was &lt;em&gt;discontinued&lt;/em&gt; around the time &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME&lt;/code&gt; 3.10 was released, and thus coincides with the dev&amp;amp;release of &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE-12&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;REHL 7&lt;/code&gt; and etc. However, a little search has surprised me that &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-fallback&lt;/code&gt; was alive as &lt;a href=&quot;https://wiki.gnome.org/Projects/GnomeFlashback&quot;&gt;gnome-flashback&lt;/a&gt; for quite a while (it’s &lt;a href=&quot;https://git.gnome.org/browse/gnome-flashback/&quot;&gt;official&lt;/a&gt;)! The history about &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME 3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fallback&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;classic&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flashback&lt;/code&gt; is convoluting, and I found &lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=2185161&quot;&gt;this post&lt;/a&gt; more or less match what I know. Now I’m starting to wonder whether &lt;code class=&quot;highlighter-rouge&quot;&gt;flashback&lt;/code&gt; will make a &lt;em&gt;comeback&lt;/em&gt;! ;P&lt;/span&gt;.&lt;/p&gt;

&lt;h1 id=&quot;sequence&quot;&gt;Sequence&lt;/h1&gt;

&lt;p&gt;Before describing each sequence in details, we explain the symptom as seen in the
bug. The &lt;em&gt;default&lt;/em&gt; theming of &lt;code class=&quot;highlighter-rouge&quot;&gt;shell-agent&lt;/code&gt; authentication diaglog is &lt;strong&gt;black&lt;/strong&gt;,
while the diaglog from &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; is &lt;strong&gt;white&lt;/strong&gt;. This makes the issue
ostentatious, easily catched by &lt;a href=&quot;https://openqa.opensuse.org/&quot;&gt;openQA&lt;/a&gt;: the
usual black dialogue is not found instead the white dialog is shown.&lt;/p&gt;

&lt;h2 id=&quot;the-normal-sequence&quot;&gt;The normal sequence&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionManager&lt;/code&gt; has internal &lt;a href=&quot;https://github.com/GNOME/gnome-session/tree/eba0460033804d2d5ce60953c76fd75f396cc43e/gnome-session/gsm-manager.h#L54&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;phases&lt;/code&gt;&lt;/a&gt;, which follows a
&lt;em&gt;nearly&lt;/em&gt; &lt;a href=&quot;https://github.com/GNOME/gnome-session/tree/eba0460033804d2d5ce60953c76fd75f396cc43e/gnome-session/gsm-manager.c#L497&quot;&gt;linear style&lt;/a&gt; of state transitions. &lt;span id=&quot;sn-linear-state&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;A notable exception is during ending session (logout/reboot/shutdown),&lt;code class=&quot;highlighter-rouge&quot;&gt;GSM_MANAGER_PHASE_QUERY_END_SESSION&lt;/code&gt; can transition back to &lt;code class=&quot;highlighter-rouge&quot;&gt;GSM_MANAGER_PHASE_RUNNING&lt;/code&gt; in case of failures. Covered in another &lt;a href=&quot;#&quot;&gt;post&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As shown above &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell&lt;/code&gt; starts at &lt;code class=&quot;highlighter-rouge&quot;&gt;DisplayServer&lt;/code&gt; phase,
(&lt;code class=&quot;highlighter-rouge&quot;&gt;X-GNOME-Autostart-Phase=DisplayServer&lt;/code&gt;), much earlier than the
&lt;a href=&quot;https://github.com/GNOME/gnome-session/tree/eba0460033804d2d5ce60953c76fd75f396cc43e/gnome-session/gsm-autostart-app.c#L614&quot;&gt;default&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; phase. &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; was started at
this default phase as it has no explicit phase setting. So usually, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell&lt;/code&gt;
starts and registers itself as agent before &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; can do &lt;em&gt;anything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The autostart condition &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME3 unless-session gnome&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; under
&lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-classic&lt;/code&gt; and thus &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; will start. However, since there is only
one allowed polkit agent, &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; will fail and exit.&lt;/p&gt;

&lt;h2 id=&quot;what-if-there-is-an-saved-session&quot;&gt;What if there is an saved session&lt;/h2&gt;

&lt;p&gt;In a &lt;code class=&quot;highlighter-rouge&quot;&gt;saved session&lt;/code&gt; situation, &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt; will detect the relevant
settings and saved session files under user home directory. It will load saved
&lt;code class=&quot;highlighter-rouge&quot;&gt;apps&lt;/code&gt; from saved session files &lt;strong&gt;first&lt;/strong&gt;, before the normal loading of
&lt;code class=&quot;highlighter-rouge&quot;&gt;required&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;autostart&lt;/code&gt; apps. &lt;span id=&quot;sn-loading-order&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The latter desktop files would not override earlier desktop files. &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt; use the &lt;code class=&quot;highlighter-rouge&quot;&gt;provides&lt;/code&gt; field to decide whether a later loaded desktop file is effective.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.gnome.Shell&lt;/code&gt;, as saved session file, the desktop entry file does &lt;strong&gt;NOT&lt;/strong&gt;
have the autostart phase set to &lt;code class=&quot;highlighter-rouge&quot;&gt;DisplayServer&lt;/code&gt;, actually, not set at all. So
it’s started at &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; phase, together with &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; is a much simpler program and might register itself as &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit
agent&lt;/code&gt;, while &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; is still running to get to its &lt;code class=&quot;highlighter-rouge&quot;&gt;JS&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;In observation, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;saved session&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; almost always win as the
real agent.&lt;/p&gt;

&lt;h2 id=&quot;what-if-shell-died&quot;&gt;What if Shell died&lt;/h2&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell&lt;/code&gt; dies, it gets restarted by &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt;. &lt;span id=&quot;sn-shell-restart&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;This is not to be confused with the built-in restart as &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt-F2, r&lt;/code&gt; would offter, in which the process itself remains the same.&lt;/span&gt; The
timing can be unfortunate for it can coincidences with the starting of
&lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt;, and be outrun by it in registering as polkit agent.&lt;/p&gt;

&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;/h1&gt;

&lt;p&gt;In this section, I will show important questions I asked during debugging and
some useful tips to prove points mentioned in the &lt;a href=&quot;#sequence&quot;&gt;Sequence&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;polkit-gnome-starts-under-gnome-classic&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; starts under &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-classic&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;To prove this point, two approaches can be taken:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://www.suse.com/documentation/sles11/singlehtml/audit_quickstart/audit_quickstart.html&quot;&gt;Linux Audit&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Manual Injection&lt;/em&gt;. Change the destktop entry file or the executable itself.
In our case, capture the stdin/stderr are sufficient.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s usually better to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Audit&lt;/code&gt; first and then empoly &lt;code class=&quot;highlighter-rouge&quot;&gt;Injection&lt;/code&gt; to get more
details.&lt;/p&gt;

&lt;h3 id=&quot;linux-auditing&quot;&gt;Linux Auditing&lt;/h3&gt;

&lt;p&gt;This seems to be the only non-intrusive approach. At the cost of complexity,
&lt;code class=&quot;highlighter-rouge&quot;&gt;Audit&lt;/code&gt; is very powerful and capable of much more. &lt;span id=&quot;sn-dtrace&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;At the time of writing, I’ve read some news on a &lt;a href=&quot;http://www.brendangregg.com/blog/2016-10-27/dtrace-for-linux-2016.html&quot;&gt;Dtrace-like functionality for kernel&lt;/a&gt;. Looks very interesting and promising, though I’m not knowledged enough, yet, to comment on the usefulness for debugging problems like this post’s.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Make sure all prerequiresites are met &lt;span id=&quot;sn-audit-post&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;(Yelling!) I have been working on another post for more detials. Plainning…&lt;/span&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## Precaution: all commands are executed under root prviliages.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# setup rules, you can optionally add more filter fields, uid might be a good addition.&lt;/span&gt;
auditctl -a &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;,always -F &lt;span class=&quot;nv&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;b64 -S all -F &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/polkit-gnome-authentication-agent-1

&lt;span class=&quot;c&quot;&gt;# verify the above is the only rule, not necessary but helpful in inspecting the log.&lt;/span&gt;
auditctl -l

&lt;span class=&quot;c&quot;&gt;# Logout and Login back again, in a new terminal, the -ts since time is the time&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# *just* before you login. Not necessary but helpful in reducting output size.&lt;/span&gt;
ausearch -i -ts 16:10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should see something like:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----
type=UNKNOWN[1327] msg=audit(10/27/16 16:03:10.518:106) : proctitle=&quot;/usr/lib/polkit-gnome-authentication-agent-1&quot; 
type=PATH msg=audit(10/27/16 16:03:10.518:106) : item=1 name=/lib64/ld-linux-x86-64.so.2 inode=38532 dev=00:26 mode=file,755 ouid=root ogid=root rdev=00:00 nametype=NORMAL 
type=PATH msg=audit(10/27/16 16:03:10.518:106) : item=0 name=/usr/lib/polkit-gnome-authentication-agent-1 inode=160885 dev=00:26 mode=file,755 ouid=root ogid=root rdev=00:00 nametype=NORMAL 
type=CWD msg=audit(10/27/16 16:03:10.518:106) :  cwd=/home/vagrant 
type=EXECVE msg=audit(10/27/16 16:03:10.518:106) : argc=1 a0=/usr/lib/polkit-gnome-authentication-agent-1 
type=SYSCALL msg=audit(10/27/16 16:03:10.518:106) : arch=x86_64 syscall=execve success=yes exit=0 a0=0x11be100 a1=0x11be0a0 a2=0x11be150 a3=0xfc2c9fc5 items=2 ppid=1726 pid=1968 auid=vagrant uid=vagrant gid=users euid=
vagrant suid=vagrant fsuid=vagrant egid=users sgid=users fsgid=users tty=(none) ses=91 comm=polkit-gnome-au exe=/usr/lib/polkit-gnome-authentication-agent-1 key=(null) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the log we can deduce: &lt;code class=&quot;highlighter-rouge&quot;&gt;ppid=1726&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;ps -up 1726&lt;/code&gt; shows that it’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session-binary&lt;/code&gt;) calls &lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt; with
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/polkit-gnome-authentication-agent-1&lt;/code&gt; as the sole argument. In other
words, &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt; started &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;manual-injection&quot;&gt;Manual Injection&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Linux Auditing&lt;/code&gt; is clean and quick, great for verifying unintend execution.
However, it doesn’t capture possible output from processes. For this we would
have to inject extra code into the start sequence. Surely, we can replace
&lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome-authentication-agent-1&lt;/code&gt; with a custom script, which calls the real
executable only with io rediction to some custom files. However, I’d like to
introduce &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-cat.html&quot;&gt;systemd-cat&lt;/a&gt; to take full advantage of &lt;code class=&quot;highlighter-rouge&quot;&gt;journald&lt;/code&gt;. &lt;span id=&quot;sn-systemd-cat&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;And avoids the hassles of managing log files. &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-cat&lt;/code&gt; can be really useful to debug &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-shell&lt;/code&gt; by piping JS logs into &lt;code class=&quot;highlighter-rouge&quot;&gt;journald&lt;/code&gt;. With advanced options offered by &lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl&lt;/code&gt;, this way is much sweeter than weeding through log files or terminal output, particularly so for &lt;code class=&quot;highlighter-rouge&quot;&gt;gdm&lt;/code&gt; shell.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;First change the &lt;code class=&quot;highlighter-rouge&quot;&gt;Exec&lt;/code&gt;&lt;span id=&quot;sn-exec-line&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Exec&lt;/code&gt; line has specific format requirement, in doubt consult the &lt;a href=&quot;https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html&quot;&gt;documentation&lt;/a&gt;&lt;/span&gt; line to something
like:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/xdg/autostart/polkit-gnome-authentication-agent-1.desktop
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;systemd-cat -t PK-G /usr/lib/polkit-gnome-authentication-agent-1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then use &lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl -t PK-G&lt;/code&gt; to pick log from &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; out specifically.
&lt;span id=&quot;sn-journctl-since&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;As with &lt;code class=&quot;highlighter-rouge&quot;&gt;ausearch&lt;/code&gt;, a since-time can be passed with &lt;code class=&quot;highlighter-rouge&quot;&gt;-S,--since=&lt;/code&gt;. Notably &lt;code class=&quot;highlighter-rouge&quot;&gt;journctl&lt;/code&gt; features far richer time formats as documented in &lt;code class=&quot;highlighter-rouge&quot;&gt;man systemd.time&lt;/code&gt;. You can use relative time setting like &lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl -S -1min&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;ausearch&lt;/code&gt; doesn’t seem to support advanced time format. However, we can always use &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; to achieve similar result. For example, to get audit logs since 90 sec ago, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ausearch -i -ts $(date +'%H:%M:%S' -d '-300sec')&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- Logs begin at Wed 2016-10-26 18:35:03 CST, end at Thu 2016-10-27 16:36:48 CST. --
Oct 27 16:36:44 linux-rblp.suse PK-G[2704]: ** (polkit-gnome-authentication-agent-1:2704): WARNING **: Unable to register authentication agent: GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed: An authentication age
Oct 27 16:36:44 linux-rblp.suse PK-G[2704]: Cannot register authentication agent: GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed: An authentication agent already exists for the given subject
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;why-polkit-gnome-started&quot;&gt;Why &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit-gnome&lt;/code&gt; started?&lt;/h2&gt;

&lt;p&gt;The culprit is the condition line &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME3 unless-session gnome&lt;/code&gt;. The current
session name referred in this condition can be looked up by introspecting
&lt;code class=&quot;highlighter-rouge&quot;&gt;org.gnome.SessionManager&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;Since the naming is not the same for this &lt;code class=&quot;highlighter-rouge&quot;&gt;session-name&lt;/code&gt;, there were some
confusion at the beginning, as some believed it refering to a &lt;code class=&quot;highlighter-rouge&quot;&gt;dconf&lt;/code&gt; setting.
It turns out this setting is the &lt;em&gt;default&lt;/em&gt; if no session type is specified on
the &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-session&lt;/code&gt; command line.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdbus introspect --session --dest org.gnome.SessionManager &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --object-path /org/gnome/SessionManager | grep -i session
    
&lt;span class=&quot;c&quot;&gt;## Output&amp;gt;    readonly s SessionName = 'gnome-classic'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# alternatively you can get to the desired property value directly, though much&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# more complicated and not recommended. (And you're going to introspect first&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# anyway ;P)&lt;/span&gt;
gdbus call --session --dest org.gnome.SessionManager &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --object-path /org/gnome/SessionManager &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --method org.freedesktop.DBus.Properties.Get &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    org.gnome.SessionManager SessionName

&lt;span class=&quot;c&quot;&gt;## Output&amp;gt; (&amp;lt;'gnome-classic'&amp;gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/code-reading-the-racing-of-two-agents</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/code-reading-the-racing-of-two-agents</guid>
        
        <category>tech</category>
        
        <category>code-reading</category>
        
        <category>sle</category>
        
        
      </item>
    
      <item>
        <title>Writing habit and tools</title>
        <description>&lt;p&gt;As a follow up to my &lt;a href=&quot;/post/revisiting-todo-of-this-site&quot;&gt;TODO review&lt;/a&gt;, I’ve
rolled out the first draft of a writing habit, together with an over-enginered
tool, &lt;a href=&quot;https://github.com/carltonf/habit&quot;&gt;habit&lt;/a&gt;, to enforce it.&lt;/p&gt;

&lt;h1 id=&quot;the-life-cycle-of-a-post&quot;&gt;The Life Cycle of a Post&lt;/h1&gt;

&lt;p&gt;The life cycle of a post &lt;span id=&quot;sn-life-cycle&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;A nerdy term, maybe more plainly, the steps for writing posts. ;P&lt;/span&gt; is the sequence of stages and states a post
will undergo through. I’ve devised two stages each with its own set of states:
&lt;span id=&quot;sn-s-naming&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;In retrospect, the naming is a little bit too mouthful and I might change them later. The reason behind all these &lt;em&gt;present tense&lt;/em&gt; is my (clumsy?) attempt to emphasize the dynamic, continuous nature of each phase.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;draft&lt;/strong&gt;: &lt;em&gt;scaffolding&lt;/em&gt;, &lt;em&gt;fledging&lt;/em&gt;, &lt;em&gt;editing&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;post&lt;/strong&gt;: &lt;em&gt;polishing&lt;/em&gt;, &lt;em&gt;reviewing&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;goals-of-topic&quot;&gt;Goals of Topic&lt;/h2&gt;

&lt;p&gt;In consistence with my view of
&lt;a href=&quot;/post/revisiting-todo-of-this-site#the-philosophy-collection&quot;&gt;post as idea-observational diary&lt;/a&gt;,
the transition between stages and states are not strictly defined. In fact, I
would rather like free-style transitions among them. Posts represent ideas,
as ideas evolve so should posts.&lt;/p&gt;

&lt;h2 id=&quot;draft&quot;&gt;Draft&lt;/h2&gt;

&lt;p&gt;Influenced by the &lt;a href=&quot;https://jekyllrb.com/docs/drafts/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;’s way&lt;/a&gt; of
organizing posts, &lt;code class=&quot;highlighter-rouge&quot;&gt;draft&lt;/code&gt; is simply a stage when posts are not deemed as befit
publishing.&lt;/p&gt;

&lt;h3 id=&quot;scaffolding&quot;&gt;Scaffolding&lt;/h3&gt;

&lt;p&gt;This may sound like just a fancy way to say &lt;em&gt;outline&lt;/em&gt;, but by using a different
word I try to emphasize the importance of &lt;em&gt;goal-setting&lt;/em&gt;. Just like building
scaffold, once erected, the building is constructed as such. The later phases
are discouraged to stray too far away from the initial goal &lt;span id=&quot;sn-programmers-straying&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Maybe it’s not only my own bad habit, all programmers may like to do something &lt;em&gt;smarter&lt;/em&gt;, &lt;em&gt;better&lt;/em&gt; or &lt;em&gt;more&lt;/em&gt;. The end result is usually &lt;em&gt;over-engineering&lt;/em&gt;, &lt;em&gt;pre-mature optimization&lt;/em&gt; and &lt;em&gt;unmet deadline&lt;/em&gt;. Sigh…&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fledging&quot;&gt;Fledging&lt;/h3&gt;

&lt;p&gt;At this state, I am conducting research and gathering raw materials for the post
in work. Throughout the years, I’ve learned the importance of extensive
references and citations. They are not merely there to make the work look more
professional, but to support the post, establish connections among different
knowledge bits and most importantly make the post &lt;strong&gt;maintainable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connections:&lt;/strong&gt; In an age of ubiquitous access to Internet and fast searching,
memorizing exact details is usually not worth the effort. It’s more important to
construct a mind map holding references to those details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maintainable:&lt;/strong&gt; You might not even remember you write this post a year later.
How do I reach this conclusion? Why do I say that? I read some of my diaries in
high school and could not believe they were written by me &lt;span id=&quot;sn-diary&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;I was shocked by the beautiful and sensational sentences (in Chinese for sure) in my old diaries. I know I’ll never be able to write something like that. Sigh, I used to be a sensitive youth and now I’m just “old and mean”.&lt;/span&gt;. I used to
think the extensive references following the article are only for research
papers. Now I believe they are necessary for anyone who takes their thoughts
serious. They’re required to make long-term post reviewing possible.&lt;/p&gt;

&lt;h3 id=&quot;editing&quot;&gt;Editing&lt;/h3&gt;

&lt;p&gt;A large potion of the work in this state is about formating. However, I’ll
remind myself this state is more about the style: remove all unnecessary parts,
check all references, check the spell, make sure the main body focused on topic
and move all smartness to side notes.&lt;/p&gt;

&lt;h2 id=&quot;post&quot;&gt;Post&lt;/h2&gt;

&lt;p&gt;A post enters this stage when it’s published. There several guidelines I’ll try
to follow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;publish early, publish often&lt;/em&gt; &lt;span id=&quot;sn-early-often&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
   &lt;span class=&quot;sidenote&quot;&gt;A variant from the famous &lt;a href=&quot;https://en.wikipedia.org/wiki/Release_early,_release_often&quot;&gt;Release early, release often&lt;/a&gt;.&lt;/span&gt;: this principle is particularly important. Whenever a post takes too long
to publish, it’s a time to think whether the original goal is too big and whether
it’d be better to divide into multiple smaller posts.&lt;/li&gt;
  &lt;li&gt;Though rare, it’s &lt;strong&gt;OK&lt;/strong&gt; to transition back to draft. In such a case, a
question should also be asked whether it’s better to write a follow-up post.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;polishing&quot;&gt;Polishing&lt;/h3&gt;

&lt;p&gt;Typos, ill-formatted text, wrong references, extra style tweakings and other
non-content-modifying changes.&lt;/p&gt;

&lt;h3 id=&quot;reviewing&quot;&gt;Reviewing&lt;/h3&gt;

&lt;p&gt;The changes that modify the content belong to this state. The &lt;em&gt;maintainability&lt;/em&gt;
 of the post will be very important at this state. Just like code, posts are
 works of thoughts, in the long run, it’s the maintenance that costs the most.&lt;/p&gt;

&lt;h1 id=&quot;tool-enforcement&quot;&gt;Tool Enforcement&lt;/h1&gt;

&lt;p&gt;I’ve written a tool in &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; called &lt;a href=&quot;https://github.com/carltonf/habit&quot;&gt;habit&lt;/a&gt;
to enforce the stages and states above &lt;span id=&quot;sn-tool-naming&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;For now it’s a tool only for writing post, but I have the intention to grow it into a generic habit enforcer. &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; is picked as I’m most familiar with it and shell scripts are not good for long-term growth. For the record, I indeed &lt;a href=&quot;https://github.com/carltonf/carltonf-blog-source/commit/a245ebc6687cef69b914d76a46cddc87b43a2f95&quot;&gt;implemented&lt;/a&gt; some functions of &lt;code class=&quot;highlighter-rouge&quot;&gt;habit&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt; shell script before migrated to &lt;code class=&quot;highlighter-rouge&quot;&gt;habit&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-the-tool-enforce-the-habit&quot;&gt;How the tool enforce the habit&lt;/h2&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/carltonf/habit&quot;&gt;README&lt;/a&gt; for details. It
suffices to say &lt;code class=&quot;highlighter-rouge&quot;&gt;habit&lt;/code&gt; helps the author focus on a single post;
unify, provision and validate &lt;code class=&quot;highlighter-rouge&quot;&gt;Git&lt;/code&gt; commit message to track stages and states;
manage posts’ meta data, draft creation and post publishing &lt;span id=&quot;sn-creation-publishing&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;At the time of writing, these are just plans. &lt;a href=&quot;https://github.com/jekyll/jekyll-compose&quot;&gt;Jekyll-compose&lt;/a&gt; is not sufficient for our needs.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Over-engineered? Yes for now, but it’s better to have a tool to remember rules
for us than rely on forgetting human mind.&lt;/p&gt;

&lt;h2 id=&quot;the-designimplementation---cli-in-node&quot;&gt;The design&amp;amp;implementation - CLI in Node&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&quot;#&quot;&gt;CLI tool development wiht nodejs - an example&lt;/a&gt; &lt;span id=&quot;sn-cli-node&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;TODO Planned.&lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/writing-habit-and-tools</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/writing-habit-and-tools</guid>
        
        <category>tech</category>
        
        <category>writing</category>
        
        <category>habit</category>
        
        <category>tool</category>
        
        
      </item>
    
      <item>
        <title>Try Out Bash on Unbuntu on Windows</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;
is the new &lt;em&gt;toy&lt;/em&gt; Microsoft brings to developers. Having played it for one day,
I feel it’s still not good enough for daily use, but a possible alternative when
necessary.&lt;/p&gt;

&lt;p&gt;Not long ago, Windows 10 has released its
&lt;a href=&quot;http://www.howtogeek.com/248177/whats-new-in-windows-10s-anniversary-update/&quot;&gt;Anniversary Update&lt;/a&gt;,
I’ve waited till it’s in the official update channel&lt;span id=&quot;sn-update&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;To be honest, I have little confidence that an Windows 10 update would not cause some regression. Anniversary Update is no exception, there are issues like the machine can not wake up from hibernation, double authorization required by Windows Hello and etc.&lt;/span&gt;. It’s still beta, and thus I didn’t expect very much
from it.&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;p&gt;Ever since &lt;em&gt;WSL&lt;/em&gt; appeared in the &lt;em&gt;Insider&lt;/em&gt; preview channel, there were
&lt;a href=&quot;https://msdn.microsoft.com/en-us/commandline/wsl/install_guide&quot;&gt;many articles&lt;/a&gt;
covering the installation. The installation from the official update channel
remains almost the same as in preview. It’s very easy and smooth &lt;span id=&quot;sn-update-smoothness&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Hmmm… maybe worth mentioning, I’ve updated two machines to the Anniversary Update, one of them breaked &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualBox&lt;/code&gt;. Reinstalling &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualBox&lt;/code&gt; fixed it.&lt;/span&gt;. CLI tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;lxrun&lt;/code&gt; are really nice &lt;span id=&quot;sn-lxrun&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;To avoid confusion, &lt;code class=&quot;highlighter-rouge&quot;&gt;lxrun&lt;/code&gt; is only used to manage installation of linux subsystem, Linux subsystem needs to be enabled &lt;strong&gt;first&lt;/strong&gt;. There is a &lt;a href=&quot;https://msdn.microsoft.com/en-us/commandline/wsl/install_guide#enable-the-windows-subsystem-for-linux-feature-command-line&quot;&gt;PowerShell guide&lt;/a&gt; to enable WSL in CLI.&lt;/span&gt;.&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;p&gt;Packages can be installed from the official &lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt; repo. One thing suspicious is
the lack of many &lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt; mirrors in the repo mirror list. Maybe it’s due to the
fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt; is still &lt;code class=&quot;highlighter-rouge&quot;&gt;Beta&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;To my surprise, &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; is pre-installed. The default console host is not to my taste
and I tried to run &lt;code class=&quot;highlighter-rouge&quot;&gt;rxvt-unicode&lt;/code&gt;, which failed with errors about missing &lt;code class=&quot;highlighter-rouge&quot;&gt;tty&lt;/code&gt; files and
etc. This is understandable, not much has been done for things under &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then I tried to &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; and it didn’t work for some permission issues.&lt;/p&gt;

&lt;p&gt;GUI-Emacs failed to work &lt;span id=&quot;sn-cli-emacs&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The CLI version worked without a problem, but these days in terminal I actually prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;Emacs&lt;/code&gt;.&lt;/span&gt;,
but GUI-&lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; can almost work. The vanilla &lt;code class=&quot;highlighter-rouge&quot;&gt;Emacs&lt;/code&gt; window showed up but
didn’t react to any input. &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; started normally but the window could not
be resized, startup parameters like &lt;code class=&quot;highlighter-rouge&quot;&gt;geometry&lt;/code&gt; settings didn’t work. &lt;span id=&quot;sn-spacemacs-works&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacemacs&lt;/code&gt; can “work” but the vanilla one doesn’t is really intriguing, though I didn’t spend effort to investigate the cause.&lt;/span&gt; I’ve followed threads like
&lt;a href=&quot;https://www.reddit.com/r/Windows10/comments/4ea4w4/fyi_you_can_run_gui_linux_apps_from_bash/&quot;&gt;this one&lt;/a&gt;
to install &lt;a href=&quot;https://sourceforge.net/projects/vcxsrv/&quot;&gt;VcXsrv&lt;/a&gt; &lt;span id=&quot;sn-vcxsrv&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VcXsrv&lt;/code&gt; is an open source fork of &lt;a href=&quot;https://sourceforge.net/projects/xming/&quot;&gt;Xming&lt;/a&gt;. The latter has stopped updating its open source version in favour of subscription-based support and has some rough edges, which get fixed in &lt;code class=&quot;highlighter-rouge&quot;&gt;VcXsrv&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Xming&lt;/code&gt; seems to be better known, while I find &lt;code class=&quot;highlighter-rouge&quot;&gt;VcXsrv&lt;/code&gt; is easier to use.&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I’ve also tried &lt;code class=&quot;highlighter-rouge&quot;&gt;vim-gtk&lt;/code&gt; and it did work. &lt;code class=&quot;highlighter-rouge&quot;&gt;gvim&lt;/code&gt; seems to be the most taunted
working &lt;code class=&quot;highlighter-rouge&quot;&gt;GUI&lt;/code&gt; application on &lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; can be used normally. At least my small personal projects had
run smoothly. It did have some errors at the start, run “&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set
unsafe-perm=true&lt;/code&gt;” as suggested in
&lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues/14&quot;&gt;this issue&lt;/a&gt; and the rest
went without any further issues.&lt;/p&gt;

&lt;p&gt;I didn’t try crazy things like
&lt;a href=&quot;https://www.reddit.com/r/Windows10/comments/4kkamr/so_with_wsl_you_can_run_gui_apps_window_managers/&quot;&gt; a full DE &lt;/a&gt;
on &lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt;, but those brave projects are fascinating.&lt;/p&gt;

&lt;h1 id=&quot;verdict&quot;&gt;Verdict&lt;/h1&gt;

&lt;p&gt;For sure, I will not give up my &lt;em&gt;boxerized&lt;/em&gt; environment &lt;span id=&quot;sn-boxerized-post&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Hmmm…where is my long planned post on this setting?&lt;/span&gt; for
&lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt;. It can not replace useful Windows tools like &lt;a href=&quot;http://cmder.net/&quot;&gt;cmder&lt;/a&gt;
and Emacs on Windows either, so I’ll not use it in my work or personal projects.
&lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; seems to be a good thing to have but &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; can natively run on &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;
already and web service stuff might encounter network permission issues like
&lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; down the road.&lt;/p&gt;

&lt;h1 id=&quot;cynical-speculation&quot;&gt;&lt;em&gt;Cynical Speculation&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;Despite recent high-profile open source activities from &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft&lt;/code&gt; &lt;span id=&quot;sn-ms-opensource&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://github.com/Microsoft/vscode/&quot;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&quot;https://github.com/Microsoft/TypeScript&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://github.com/Microsoft/ChakraCore&quot;&gt;ChakraCore&lt;/a&gt; to name some of the most popular.&lt;/span&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt; is not open source. This might root from the close integration
with the Windows kernel. Understandable? Maybe, but it’s a disappointment
nevertheless. Some &lt;a href=&quot;https://news.ycombinator.com/item?id=11445301&quot;&gt;discussions&lt;/a&gt;
online also shows that this is not the first time Microsoft tries to do
something like this.&lt;/p&gt;

&lt;p&gt;My gut feelings is that Microsoft is just staging a show here. All in the effort
to put &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; back into developers’ mind and back onto the focus of media.
Just looks at the published name used in media - &lt;code class=&quot;highlighter-rouge&quot;&gt;Bash on Ubuntu on Windows&lt;/code&gt;,
what a mouthful, lousy name! But it is carefully picked, and sorted in terms’
popularity in developers’ mind: &lt;code class=&quot;highlighter-rouge&quot;&gt;Bash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; - A bad name on
its own right, a good marketing strategy in today’s IT context. &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;
piggybacks upon &lt;code class=&quot;highlighter-rouge&quot;&gt;Bash&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt; to try to have a come back. Just like
someone joked on the web about &lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt;: it’s “&lt;em&gt;Linux without the Linux part&lt;/em&gt;” or
“GNU/NT”. &lt;span id=&quot;sn-gnu-nt&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Someone followed up: “Richard Stallman must be so proud.” ;P&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;However, it’s still an interesting show, and despite the caution for investing
on this &lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt; thing, the sheer number of issues at
&lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues&quot;&gt;Github&lt;/a&gt; have shown that
there are people can benefit from &lt;code class=&quot;highlighter-rouge&quot;&gt;WSL&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/try-out-bash-on-unbuntu-on-windows</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/try-out-bash-on-unbuntu-on-windows</guid>
        
        <category>tech</category>
        
        <category>windows</category>
        
        <category>bash</category>
        
        <category>ubuntu</category>
        
        
      </item>
    
      <item>
        <title>A learning guide for GNOME Shell bug fixing</title>
        <description>&lt;p&gt;A curated list of learning materials, references for GNOME Shell (bug-fixing)
developers – &lt;em&gt;very&lt;/em&gt; pragmatic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIM:&lt;/strong&gt; Even at the time of writing, I was not following GNOME development
as I used to be. So much of the claims on the states GNOME 3 might be
out-righteously outdated.&lt;/p&gt;

&lt;p&gt;The other day, my team leader asked me to give some guide for new colleagues in
the team. I came up with a list of learning materials, references &lt;em&gt;with strong
personal opinions&lt;/em&gt; &lt;span id=&quot;sn-strong-opined&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Any sane GNOME developers might scream at the incompleteness of the list.&lt;/span&gt;. After passing the list to the new
member, I realized this is also an opportunity to review my understanding. So
here is the guideline list plus my review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some Conventions&lt;/strong&gt;: different materials have different importance. I didn’t
bother going into fine grades of proficiency level. &lt;span id=&quot;sn-proficiency-level&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;This brings up the memory about the college entry exam, when every student was supposed to know the required proficiency level of each subject.&lt;/span&gt; Only two levels are used: &lt;strong&gt;Master&lt;/strong&gt; and &lt;strong&gt;General&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;materials&quot;&gt;Materials&lt;/h1&gt;

&lt;h2 id=&quot;d-bushttpswwwfreedesktoporgwikisoftwaredbus&quot;&gt;&lt;a href=&quot;https://www.freedesktop.org/wiki/Software/dbus/&quot;&gt;D-Bus&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Master&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D-Bus&lt;/code&gt; is the core RPC mechanism for Linux applications. As with any RPC
mechanism, it’s unlikely you’ll love it. Its syntax is bewildering and verbose;
few supportive tools are of relatively low quality – merely usable. Anyway, you
still need to know it well for its ubiquity in gnome.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DBus&lt;/code&gt; would have been much more important if the
kernel module &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/systemd/kdbus/&quot;&gt;kdbus&lt;/a&gt;
had been merged into kernel. The farthest progress it made was into
&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel-next&lt;/code&gt;. I’ve read some articles at
&lt;a href=&quot;http://www.phoronix.com/scan.php?page=search&amp;amp;q=KDBUS&quot;&gt;phoronix&lt;/a&gt; talking about
the main obstacle was about the security. As a mere side looker, I’ll not say
more.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://dbus.freedesktop.org/doc/dbus-tutorial.html&quot;&gt;D-Bus Tutorial&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The best introductory material.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.freedesktop.org/wiki/IntroductionToDBus/&quot;&gt;D-Bus Intro&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Slightly more theoretical. Read after the first.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;freedesktoporg-specshttpswwwfreedesktoporgwikispecifications&quot;&gt;&lt;a href=&quot;https://www.freedesktop.org/wiki/Specifications/&quot;&gt;Freedesktop.org Specs&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Freedesktop.org&lt;/code&gt; specs are &lt;em&gt;NOT&lt;/em&gt; standards but &lt;em&gt;recommendations&lt;/em&gt;. Though most
DEs have chosen to comply with &lt;strong&gt;some&lt;/strong&gt; of these specs, the compliance level varies.
Nevertheless, since they are somewhat ubiquitous in GNOME, developers are
recommended to know at least the followings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Desktop base directory spec: &lt;em&gt;Master&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Desktop Entry specification: &lt;em&gt;Master&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The Autostart specification: &lt;em&gt;General&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The XSETTINGS:  &lt;em&gt;General&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The File URI specification : &lt;em&gt;General&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these recommendations are relatively small and the &lt;em&gt;Master&lt;/em&gt; level
would require less than one day to achieve.&lt;/p&gt;

&lt;h2 id=&quot;gnome-shell-wikihttpswikignomeorgprojectsgnomeshell&quot;&gt;&lt;a href=&quot;https://wiki.gnome.org/Projects/GnomeShell&quot;&gt;GNOME Shell Wiki&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The main hub for GNOME-specific knowledge. Here I’ve listed some more important
ones: &lt;span id=&quot;sn-gnome-wiki&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Things &lt;em&gt;might&lt;/em&gt; have improved much these days. For a long time, only some C libraries have some decent API documents. The introspection bindings to &lt;code class=&quot;highlighter-rouge&quot;&gt;Gjs&lt;/code&gt; is not complete but only a pragmatic subset. Shell UI components are completely undocumented and have no external API for programming/theming. Code and Wiki might be the only official &lt;em&gt;documents&lt;/em&gt; for whatever the help they might offer.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General Information:  &lt;em&gt;Master&lt;/em&gt;, helpful for debugging&lt;/li&gt;
  &lt;li&gt;Technology: &lt;em&gt;General&lt;/em&gt;, you need to know the capacity of each component.&lt;/li&gt;
  &lt;li&gt;Looking Glass：&lt;em&gt;Master&lt;/em&gt;. Not as useful as it claims to be but this is the only
built-in tool we have.&lt;/li&gt;
  &lt;li&gt;Development guide for GNOME Shell：&lt;em&gt;General&lt;/em&gt;, this is more about feature
development and upstream involvement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javascripthttpwwwecma-internationalorgdefaulthtm&quot;&gt;&lt;a href=&quot;http://www.ecma-international.org/default.htm&quot;&gt;JavaScript&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I like &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;, but some do not. However, since GNOME Shell UI part is
almost written completely in JavaScript, we all need to know it well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742&quot;&gt;JavaScript: The Good Parts&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The only &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; book needed for the work (also one of the best JS books
out there). The &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; engine used by GNOME Shell is
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt;,
version 24 &lt;span id=&quot;sn-spidermonkey-version&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
    &lt;span class=&quot;sidenote&quot;&gt;Previous SP1, i.e. GNOME 3.10.x is shipped with &lt;code class=&quot;highlighter-rouge&quot;&gt;SpiderMonkey&lt;/code&gt; version 17.&lt;/span&gt;, a relatively recent JS engine.
However, GNOME has only utilized a small set of JS features in a C-like
fashion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/JavaScript-Definitive-Guide-Activate-Guides-ebook/dp/B004XQX4K0&quot;&gt;JavaScript: the Definitive Guide&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Not Recommended&lt;/strong&gt; This may be the most popular book known to beginners.
However, it’s popular for reasons irrelevant to us. The major part (about 70%)
of the book is about client-side JavaScript, the JavaScript that runes in the
browser. This book became popular when the language was still condemned to be &lt;em&gt;the
shell scripting&lt;/em&gt; for web pages, long before &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; rose up as a
superstar language. So even for the client side part, much is deprecated in
today’s practice. Plus, the last version (6th) is from 2011, though not
outdated for our purpose.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Online references: &lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;MDN&lt;/a&gt; is great.
Another site I’ve used often is &lt;a href=&quot;http://devdocs.io/&quot;&gt;Devdocs.io&lt;/a&gt;, which has
many other docs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xorghttpswwwxorg&quot;&gt;&lt;a href=&quot;https://www.x.org/&quot;&gt;X.org&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You really do not want to learn too much about &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;, but you really need to learn
much about it. Despite
&lt;a href=&quot;http://www.phoronix.com/scan.php?page=article&amp;amp;item=x_wayland_situation&amp;amp;num=1&quot;&gt;the mess&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; is still the dominant &lt;span id=&quot;sn-waylang&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;If not the only viable option, &lt;a href=&quot;https://wayland.freedesktop.org/&quot;&gt;Wayland&lt;/a&gt; is still far from being an feasible alternative.&lt;/span&gt; display technology in Linux Desktop. For us, &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; is too arcane
to dive deep, too important to ignore. I would recommend the book
&lt;a href=&quot;https://www.amazon.com/X-Power-Tools-Chris-Tyler-ebook/dp/B0028N4W9W/&quot;&gt;X Power Tools&lt;/a&gt;
for the introduction. &lt;span id=&quot;sn-x-power&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;This book is not only about X, but also covers the whole Desktop software stack. Personally, I would recommend the whole book.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;gnome-3-application-development-beginners-guidehttpswwwamazoncomgnome-application-development-beginners-guide-ebookdpb00av5oxum&quot;&gt;&lt;a href=&quot;https://www.amazon.com/GNOME-Application-Development-Beginners-Guide-ebook/dp/B00AV5OXUM/&quot;&gt;GNOME 3 Application Development Beginner’s Guide&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A book I only recommend because its high relevance to our
work. In general, do not bother with &lt;code class=&quot;highlighter-rouge&quot;&gt;vala&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;anjuta&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Gtk+&lt;/code&gt; if you only work
with Shell UI. And read the following chapters first, other parts are not
recommended though.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chapter 3&lt;/li&gt;
  &lt;li&gt;Chapter 4&lt;/li&gt;
  &lt;li&gt;Chapter 10&lt;/li&gt;
  &lt;li&gt;Chapter 11: &lt;em&gt;General&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;This book was the one my old team leader
recommended to me, 3 years ago. There was a
&lt;a href=&quot;https://github.com/beijinggug/gnome3-app-book&quot;&gt;Chinese translation project&lt;/a&gt; for
it as well. I was listed as an translator, but never found enough interests to
really work on it. The project itself seems to be abandoned long ago as well
with only the first translated chapter released.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With the breaking changes introduced in each GNOME 3 releases, many examples
might not work at all. It’s not recommended to try to fix those demos as they
might depend on internal Shell implementation and thus hard to fix. The book
uses &lt;a href=&quot;https://wiki.gnome.org/action/show/Projects/Seed&quot;&gt;seed&lt;/a&gt;, the rumored next
JS binding for GNOME. &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt; has not replaced
&lt;a href=&quot;https://wiki.gnome.org/action/show/Projects/Gjs&quot;&gt;gjs&lt;/a&gt;, maybe
&lt;a href=&quot;http://ftp.gnome.org/pub/GNOME/sources/seed/&quot;&gt;never will&lt;/a&gt;. Before
&lt;a href=&quot;https://www.roojs.org/index.php/projects/gnome/introspection-docs.html&quot;&gt;the latest update&lt;/a&gt;,
it is the only one that has some documents.&lt;/p&gt;

&lt;h2 id=&quot;sle-classichttpsbitbucketorgcarltonfsle-classic&quot;&gt;&lt;a href=&quot;https://bitbucket.org/carltonf/sle-classic&quot;&gt;SLE Classic&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This part is actually about a SUSE-specific GNOME feature.&lt;/p&gt;

&lt;p&gt;At the beginning of &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE 12&lt;/code&gt; development, the drastic deviation of &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME 3&lt;/code&gt;
from old desktop design of &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME 2&lt;/code&gt; (in &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE 11&lt;/code&gt;) was considered a regression
for users. &lt;span id=&quot;sn-gnome3-choice&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;In case you are curious about why &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME 3&lt;/code&gt; was picked back then, the answer is very &lt;em&gt;human&lt;/em&gt;: the remaining staff at Desktop Department were only familiar with &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME&lt;/code&gt;. The irony is that &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME 3&lt;/code&gt; is anything but a familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;GNOME&lt;/code&gt;.&lt;/span&gt; To tackle this issue, a feature was
proposed which is basically an incarnation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE 11&lt;/code&gt; desktop look&amp;amp;feel. &lt;span id=&quot;sn-other-gnomelikes&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;For the record, &lt;a href=&quot;http://mate-desktop.com/&quot;&gt;Mate&lt;/a&gt; and &lt;a href=&quot;https://github.com/linuxmint/Cinnamon&quot;&gt;Cinnamon&lt;/a&gt; are popular GNOME-forked desktops which have done a much better job in preserving the traditional desktop design. The reason not to pick one of them was the concern over upstream community support. I’ll avoid another irony comment ;P&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The repo at &lt;a href=&quot;https://bitbucket.org/carltonf/sle-classic&quot;&gt;Bitbucket&lt;/a&gt; was my
personal repo to track the development of &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE Classic&lt;/code&gt;. It has some useful
notes and can serve a good reference for maintaining &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE Classic&lt;/code&gt;. The commit
log might also be of some interest but the old history is incomplete and
convoluted as I was also beginner back then. At present, I believe it is merely
an interim hack to help users migrate to newer desktop and should be
discontinued in future &lt;code class=&quot;highlighter-rouge&quot;&gt;SLE&lt;/code&gt; releases.&lt;/p&gt;

&lt;h1 id=&quot;final-notes&quot;&gt;Final Notes&lt;/h1&gt;

&lt;h2 id=&quot;mentality&quot;&gt;Mentality&lt;/h2&gt;

&lt;p&gt;Beginners for Shell might be surprised by the breaking changes &lt;em&gt;GNOME 3&lt;/em&gt;
introduces every release, the lack of documentation in &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; part and
the &lt;em&gt;pragmatic&lt;/em&gt; set of bindings offered to the &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; space. That’s all
right, &lt;em&gt;GNOME 3&lt;/em&gt; strives to be something new and they are still in the process
to be &lt;a href=&quot;https://wiki.gnome.org/GnomeOS&quot;&gt;something more&lt;/a&gt;. Despite being bitten by
these issues in the past, I have come to the revelation that most of the time
developers work with insufficient knowledge and instability might just be the
norm in this line of work. &lt;span id=&quot;sn-80-20&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;In retrospect, I wrote a &lt;a href=&quot;/post/a-workflow-for-bug-fixing&quot;&gt;post&lt;/a&gt; about this quite a while ago.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nevertheless, these will still cause inconvenience in the future but at least
you are warned. &lt;span id=&quot;sn-warned&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Instead of wasting hours of searching in the doubt of one’s own inability to find necessary information. Been there, done that ;P&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;recommended-learning-order&quot;&gt;Recommended Learning Order&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;a href=&quot;http://baike.baidu.com/view/9647254.htm&quot;&gt;“道生一, 一生二，二生三，三生万物”.&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Things have to come in order.&lt;/p&gt;

&lt;p&gt;I think the following order is appropriate for a beginner:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;GNOME Shell Main Wiki&lt;/li&gt;
  &lt;li&gt;D-Bus Tutorial&lt;/li&gt;
  &lt;li&gt;JavaScript core&lt;/li&gt;
  &lt;li&gt;GNOME 3 Application Development Beginner’s Guide: the recommended parts.&lt;/li&gt;
  &lt;li&gt;X Power Tool:  really worth reading, but can be hard at the beginning.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/a-learning-guide-gnome-shell-bug-fixing</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/a-learning-guide-gnome-shell-bug-fixing</guid>
        
        <category>tech</category>
        
        <category>gnome</category>
        
        <category>bugfix</category>
        
        
      </item>
    
      <item>
        <title>Revisiting TODO of this site</title>
        <description>&lt;p&gt;With a revamping done, it’s a good moment to reflect upon the old plan I had for
this site and some ideas about it in the future.&lt;/p&gt;

&lt;p&gt;It’s been quite a while since the last time I’ve published a post &lt;span id=&quot;sn-drafts&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;for the record, I &lt;em&gt;did&lt;/em&gt; write several drafts during this vacancy&lt;/span&gt;
and now this site is undergoing a second redesign. &lt;span id=&quot;sn-history&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The 1st attempt is using &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;, the 2nd attempt is using &lt;a href=&quot;https://github.com/ardumont/org2jekyll&quot;&gt;Org2Jekyll&lt;/a&gt; and Jekyll itself. There is also a 2.5 attempt when I switch from org source to markdown, but old posts are not all converted though.&lt;/span&gt;.&lt;/p&gt;

&lt;h1 id=&quot;review&quot;&gt;Review&lt;/h1&gt;

&lt;p&gt;The old &lt;em&gt;TODO&lt;/em&gt; page was published almost exactly one year ago. &lt;span id=&quot;sn-last-TODO&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;The last &lt;a href=&quot;http://carltonf.github.io/post/old-todo-page&quot;&gt;todo note&lt;/a&gt; is taken at 03 August 2015.&lt;/span&gt; The timing is a pleasant coincidence.&lt;/p&gt;

&lt;h2 id=&quot;populate-wiki&quot;&gt;Populate Wiki&lt;/h2&gt;

&lt;p&gt;I would call this part partially done as dozens of entries have been added since
then. However there are not as many as I’d like. However, at present I believe
a completely independent wiki is not necessary. Much like the value of
sidenote/marginnote, wiki should serve posts as reference source, and thus many
features planned for wikis are scratched.&lt;/p&gt;

&lt;h2 id=&quot;sidebar&quot;&gt;Sidebar&lt;/h2&gt;

&lt;p&gt;Sidebar is removed all together. &lt;span id=&quot;sn-sidebar&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;To my slight surprise, half of the original &lt;em&gt;TODO&lt;/em&gt; is about features for sidebar. I guess it’s because I was learning web design back then and sidebar offered the most challenging problems. Unfortunately, these &lt;em&gt;challenges&lt;/em&gt; served only as distractions to making a good personal site: writing high-quality posts and showcase real work.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Firstly, the design style of this site is &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS&lt;/a&gt;. 
&lt;span id=&quot;sn-kiss&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;In retrospect, all previous revamping are actually moving towards the current &lt;code class=&quot;highlighter-rouge&quot;&gt;KISS&lt;/code&gt; style. &lt;code class=&quot;highlighter-rouge&quot;&gt;Octopress&lt;/code&gt; is full of conventions I didn’t understand. Writing posts in Emacs &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt; and then do the conversion adds extra indirections and complexities.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Further, I’ve realized that &lt;strong&gt;the most common&lt;/strong&gt; way visitors (including myself)
use this site is: search the web or follow some links to a post in this site,
read the interesting bits and then leave. In the very few occasions a visitor
might be curious enough to explore other parts of the site. So the pivotal point
in design should be to maximize the readability of &lt;strong&gt;the post&lt;/strong&gt; and sidebar is
only a distraction. &lt;span id=&quot;sn-sidebar&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Actually in the old design, sidebar is an example of &lt;em&gt;premature optimization&lt;/em&gt;. Sidebar essentially is an optimization for site navigation, which as any other shortcut/optimization should be justified first. It can be easily justified for some e-commerce site, but not really for a small personal site.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-philosophy-collection&quot;&gt;The Philosophy Collection&lt;/h2&gt;

&lt;p&gt;Not much have been done. However, I started to write some posts on more
abstract topics like &lt;a href=&quot;http://carltonf.github.io/post/a-workflow-for-bug-fixing&quot;&gt;bug fixing
methodology&lt;/a&gt;, &lt;a href=&quot;http://carltonf.github.io/post/adapt-vs-configure&quot;&gt;the
merits of adaption&lt;/a&gt; and etc.
I think this is a good direction and in line with my aforementioned plan for
wikis. I see posts more as observational diary about ideas. It’s about the
process that an idea comes into being, goes through stages of developing,
absorbing new facts, integrating with other ideas to form a system and
eventually fading into irrelevance and being superseded by new ideas. 
&lt;span class=&quot;marginnote&quot;&gt;And it’s in this view of posts, specific, reusable
tips/scripts should be factored out into wiki. Wiki serves posts (in extension
&lt;em&gt;ideas&lt;/em&gt;) as references.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With the above said, I’ll strive to stay pragmatic though ;P.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s about the review. It’s a little disappointed to see only so few has been
planned.&lt;/p&gt;

&lt;h1 id=&quot;the-new-plan&quot;&gt;The &lt;em&gt;NEW&lt;/em&gt; Plan&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;“Nothing is ever new. Only the history previously unknown.”&lt;/em&gt; &lt;span id=&quot;sn-nothing-new&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;I failed to find this saying’s origin, the closest source seems to be &lt;em&gt;“There is nothing new under the sun. It has all been done before”&lt;/em&gt; from &lt;a href=&quot;https://en.wikipedia.org/wiki/A_Study_in_Scarlet&quot;&gt;A Study in Scarlet&lt;/a&gt;&lt;/span&gt;. So the &lt;em&gt;NEW&lt;/em&gt;
plan is more about the ideas I’ve long had and would like to see implemented in
the site. The &lt;em&gt;TODO&lt;/em&gt; page is no longer there, but I’ve enjoyed the one-year
review of my previous &lt;em&gt;TODO&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;styledesign&quot;&gt;Style&amp;amp;Design&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;In my metaphor, &lt;code class=&quot;highlighter-rouge&quot;&gt;KISS&lt;/code&gt; is like straight parallel
lines and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tufte CSS&lt;/code&gt; adds musical notes on them.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I’ve liked the &lt;a href=&quot;https://edwardtufte.github.io/tufte-css/&quot;&gt;Tufte CSS Style&lt;/a&gt; from
the very beginning, before I even knew its name. It’s &lt;code class=&quot;highlighter-rouge&quot;&gt;KISS&lt;/code&gt; plus delicacy. I’ve
adapted this style with &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; using good work done by
&lt;a href=&quot;https://cdn.ampproject.org/c/siawyoung.com/immaculate/&quot;&gt;Immaculate Jekyll Theme&lt;/a&gt;,
which also features the
&lt;a href=&quot;https://www.ampproject.org/docs/get_started/about-amp.html&quot;&gt;AMP&lt;/a&gt;. &lt;span id=&quot;sn-amp&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Personally, I know little about &lt;code class=&quot;highlighter-rouge&quot;&gt;AMP&lt;/code&gt;, other than it’s proponed by &lt;em&gt;Google&lt;/em&gt; and good for mobile devices. It seems to embed all stylesheet within the HTML itself, which is bewildering to me for now.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I’ve also put up a homepage instead of the list of posts as I envision this site
to be the main hub for all my online activities.&lt;/p&gt;

&lt;h2 id=&quot;habit&quot;&gt;Habit&lt;/h2&gt;

&lt;p&gt;One main goal of the plan is to cultivate a habit of frequent writing. How
exactly I am going to achieve this still eludes me. Here is the sketch of what
I want to accomplish:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write everyday.&lt;/p&gt;

    &lt;p&gt;I’ve started using &lt;code class=&quot;highlighter-rouge&quot;&gt;OneNote&lt;/code&gt; for planning and note taking. The accumulated
notes can serve as a good basis. &lt;span class=&quot;marginnote&quot;&gt;Many more old
notes are in &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt; files.&lt;/span&gt; As posting everyday would be quite
laborious, there have to be some guidelines on what to write, how to write. A
transitory guide is to &lt;em&gt;single out an idea, quickly scratch a post and
publish, then review and refine&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Formalize a writing style.&lt;/p&gt;

    &lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;em&gt;TODO&lt;/em&gt; Reflect on the way posts are
written and put up a post about a good style&lt;/span&gt;&lt;/p&gt;

    &lt;p&gt;Everyone has a style but not everyone is aware, let alone formalizing it. A
consistent and formal style can really speed up writing and it’s the key in
forming the habit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;extra-collections&quot;&gt;Extra Collections&lt;/h2&gt;

&lt;p&gt;Other than the habit, I’d like to see some new additions to my site.&lt;/p&gt;

&lt;h3 id=&quot;presentations&quot;&gt;Presentations&lt;/h3&gt;

&lt;p&gt;If posts are for a single visitor&lt;span id=&quot;sn-posts-for&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;To digest the content in one’s own pace.&lt;/span&gt;, presentations are for a group of audience. The format
and use cases of presentations enforces the following properties: &lt;em&gt;compact&lt;/em&gt;,
&lt;em&gt;succinct&lt;/em&gt;, &lt;em&gt;open for questions and critics&lt;/em&gt;. It can serve as the best way to
introduce/summarize a complex topic.&lt;/p&gt;

&lt;p&gt;As it said, &lt;em&gt;“Every job is a sales job.”&lt;/em&gt;. Being good at presentation also
makes one more competitive in job market.&lt;/p&gt;

&lt;p&gt;The plan is to recap, recollect all my old presentations first. Reedit them if
the topics are still relevant today. Write new presentations whenever it’s good
to do so.&lt;/p&gt;

&lt;h3 id=&quot;showcases&quot;&gt;Showcases&lt;/h3&gt;

&lt;p&gt;Hmm, this part is the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; clause in my plan&lt;span id=&quot;sn-default-clause&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;I.e. everything else. ;P&lt;/span&gt;. More concretely, as there are some other sites
I’ve frequently used out there, collect those worthy ones and make a page for
them in this site. &lt;span id=&quot;sn-main-hub-reiterate&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;&lt;strong&gt;This&lt;/strong&gt; site is my online hut(hub).&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;about-reading-notes&quot;&gt;About Reading Notes&lt;/h3&gt;

&lt;p&gt;Reading notes will be removed and only more thoughtful review for books are
worth a post.&lt;/p&gt;

&lt;p&gt;I’ve got some posts &lt;span id=&quot;sn-reading-draft&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Some more are in &lt;code class=&quot;highlighter-rouge&quot;&gt;_drafts/&lt;/code&gt;&lt;/span&gt;
that are merely quotes from books I’ve read. Posts are ill-fit for quote
collection like that. For the purpose of reviewing, I’ve found
&lt;a href=&quot;http://ankisrs.net/&quot;&gt;Anki&lt;/a&gt; to be handy.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The End&lt;/h2&gt;

&lt;p&gt;That’s all for now. Big ideas and let’s make sure they would end up as &lt;em&gt;Big
words&lt;/em&gt; only. &lt;span id=&quot;sn-big-words&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;http://www.thefrisky.com/2012-05-16/12-words-and-phrases-from-game-of-thrones-that-need-to-be-part-of-your-vocabulary/&quot;&gt;&lt;em&gt;“Words are wind~”&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/revisiting-todo-of-this-site</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/revisiting-todo-of-this-site</guid>
        
        <category>tech</category>
        
        <category>todo</category>
        
        <category>admin</category>
        
        
      </item>
    
      <item>
        <title>Powershell Tips Notes</title>
        <description>&lt;p&gt;An ongoing accreted list of Powershell tips&amp;amp;tricks from multiple sources.&lt;/p&gt;

&lt;h1 id=&quot;powershell-tips-for-bash-users---fiveagency&quot;&gt;PowerShell tips for bash users - five.agency&lt;/h1&gt;

&lt;h2 id=&quot;xargs-and-for-loop&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; and for loop&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat dirs&lt;/span&gt; | %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;mkdir &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is no &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; command in PS, but you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt; loop and pass the piped variable &lt;code class=&quot;highlighter-rouge&quot;&gt;$_&lt;/code&gt; to the mkdir. Shorthand for &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;objects&quot;&gt;objects&lt;/h2&gt;
&lt;p&gt;There is practically no way to write a script even as simple as this one without using objects.&lt;/p&gt;

&lt;h1 id=&quot;powershell-101-from-a-linux-guy&quot;&gt;Powershell 101 From a Linux Guy&lt;/h1&gt;

&lt;h2 id=&quot;naming-convention&quot;&gt;Naming Convention&lt;/h2&gt;

&lt;p&gt;A decent naming convention to the cmdlets, which helps in guessing… &lt;strong&gt;Verb-SingularNoun&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;meta-info--help&quot;&gt;Meta Info &amp;amp; Help&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$PSVersionTable&lt;/span&gt;

update-help

&lt;span class=&quot;nb&quot;&gt;Get-Command&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# measure the time&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;measure-command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; -Filter &lt;span class=&quot;s2&quot;&gt;&quot;*.exe&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-object-in-place&quot;&gt;Use object in place&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.name

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.CreationTime

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Length
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;alias&quot;&gt;Alias&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;New-Alias&lt;/span&gt; -Name grep -Description grep &lt;span class=&quot;nb&quot;&gt;Select-String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/powershell-tips-notes</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/powershell-tips-notes</guid>
        
        <category>tech</category>
        
        <category>powershell</category>
        
        <category>tips</category>
        
        <category>notes</category>
        
        
      </item>
    
      <item>
        <title>Reading: Code Breakers</title>
        <description>&lt;p&gt;Quotes and notes from book ~Colin F. Barnes~ &lt;em&gt;Code Breakers: Alpha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When reading on Kindle, various highlightings and notes are accreted. These “Readings: XXX” series are my note recordings. As an English learner, some notes appeal to me for their mere language values and might not be related to the content of the book ;P. &lt;span id=&quot;side1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;sidenote&quot;&gt;Might be better to have separate repo for these notes&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;alpha&quot;&gt;Alpha&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;… the Dome – before City Earth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A pairs of brass-rimmed goggles with darkened lenses appeared in the gap. They gave the fragile girl wearing them the countenance of a nervous lemur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… so – the words escaped him.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… the electric motors whined up to speed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… I don’t think this Jasper is the wet-behind-ears kid you think he is. That dude’s got some serious game face. He knows what’s going down.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ahead of him bright light reduced his pupils to dues specks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… her slow veins showed through like blue string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beth blushes further, turning her face away with all &lt;strong&gt;the subtle coyness of a vixen in heat&lt;/strong&gt;. &lt;strong&gt;Twirling a length of auburn hair around&lt;/strong&gt; her perfectly manicured finger, she bites her lip.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Petal smiled and shook her head. “You just like her bouncing tits.”&lt;/p&gt;

  &lt;p&gt;“What? No! That’s not what I–”&lt;/p&gt;

  &lt;p&gt;“Chill, Gez, I’m just &lt;strong&gt;yanking your chain&lt;/strong&gt;.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Having a heart gets ya killed, boy.”&lt;/p&gt;

  &lt;p&gt;“Don’t &lt;strong&gt;boy me&lt;/strong&gt;, old man…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The lights came on, blinding Gerry so that all he could see were the fine blood vessels backlit in his eyelids&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… the laser beams – illuminated by the rakish angle of the sun and the dusty particulate in the air.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Gabe’s eyebrows knitted together with incredulity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… Trust is a two-way street, and I only travel one way.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… a number of buildings appeared on the horizon: skyscrapers and many others in all kinds of sizes and shapes stood in the fog like grey fungi.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sitting made &lt;strong&gt;a bright flare explode&lt;/strong&gt; in his vision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;He stood and waited for &lt;strong&gt;his balance to re-calibrate&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;… rippling with muscles beneath his dark form-fitting clothes, …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“… I’ll &lt;strong&gt;patch in&lt;/strong&gt;.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;He admonished himself for being so neglectful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The heat of the shot boiled the blood so that a red mist fell upon the slumped body.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;AO – augmented overlay.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jachz blinked once and became still; so still that Gerry had a strange idea he might have perhaps crashed and was in need of a reboot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I can’t answer that, as I know not what I miss. One cannot wish for something one does not know or understand.”&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/reading-code-breakers</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/reading-code-breakers</guid>
        
        <category>crystal</category>
        
        <category>reading</category>
        
        <category>notes</category>
        
        
      </item>
    
      <item>
        <title>A Reflection on Content Management</title>
        <description>&lt;p&gt;Just some thoughts on “How do I manage files/content on computers?”.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;I’ve been planing this post for quite some time, ever being a procrastinative type, sigh….&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;file&quot;&gt;File&lt;/h1&gt;

&lt;p&gt;Ironically, this is the most &lt;em&gt;intuitive&lt;/em&gt; way. &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; is a concept well-known, but very inflexible. Reasonably, it’s in fact the most &lt;em&gt;unintuitive&lt;/em&gt; way as it forces us to think in very low level that conceptually has nothing to do with what we really want: the &lt;strong&gt;content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a world more and more mobile-oriented, the role of files has receded. And yet it remains the most efficient method for managing simple content (like a post ;P).&lt;/p&gt;

&lt;h1 id=&quot;application&quot;&gt;Application&lt;/h1&gt;

&lt;p&gt;To center around an application is not new in mobile computation, but it only gets popular as a mindset with the rise of mobile devices. In the era of desktop, users use applications to accomplish tasks but yet they think in files instead of applications: a word document, a powerpoint file and etc. With mobile devices’ small screen estate, inconvenient inputs and on-the-go usage, navigating a file system becomes so cumbersome that most users would avoid.&lt;/p&gt;

&lt;p&gt;Applications strive to present content directly and intuitively. However, how to represent content has no universal consent. This creates a fragmented world with big players creating large closed circles by offering more integration within its own ecosystem but inconvenient, if even possible, interpolation with other applications. In retrospect, the very weakness of &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; concept is also its very strength: low-level but universal. Nevertheless, I still consider application-based content management is a breeze compared with files.&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content&lt;/h1&gt;

&lt;p&gt;I’d like to say this is the future, but I lack any confidence to say so as content representation is so diversified that any universal and yet high-level enough representation seems impossible.&lt;/p&gt;

&lt;p&gt;Computers are indeed becoming smarter though, so if we can have an intelligent personal assistance, then we might be able to think in a content-oriented way and be free of “opening this or that app for my work” lock-in. However, then we might be locked-in with a specific type of assistance system, right ;P&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://carltonf.github.io/post/reflections-on-content-management</link>
        <guid isPermaLink="true">http://carltonf.github.io/post/reflections-on-content-management</guid>
        
        <category>tech</category>
        
        <category>reflection</category>
        
        
      </item>
    
  </channel>
</rss>
